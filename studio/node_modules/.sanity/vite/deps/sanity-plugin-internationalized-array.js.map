{
  "version": 3,
  "sources": ["../../../../../node_modules/fast-deep-equal/index.js", "../../../../../node_modules/suspend-react/index.js", "../../../../../node_modules/@sanity/language-filter/src/filterField.ts", "../../../../../node_modules/@sanity/language-filter/src/useSelectedLanguageIds.ts", "../../../../../node_modules/@sanity/language-filter/src/LanguageFilterStudioContext.tsx", "../../../../../node_modules/@sanity/language-filter/src/usePaneLanguages.ts", "../../../../../node_modules/@sanity/language-filter/src/LanguageFilterMenuButton.tsx", "../../../../../node_modules/@sanity/language-filter/src/LanguageFilterObjectInput.tsx", "../../../../../node_modules/@sanity/language-filter/src/plugin.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/cache.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/constants.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/utils/getDocumentsToTranslate.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/utils/getLanguageDisplay.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/AddButtons.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/DocumentAddButtons.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/getSelectedValue.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/InternationalizedArrayContext.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/Preload.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/utils/checkAllLanguagesArePresent.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/utils/createAddAllTitle.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/utils/createValueSchemaTypeName.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/utils/createAddLanguagePatches.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/fieldActions/index.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/createFieldName.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/Feedback.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/InternationalizedArray.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/utils/getLanguagesFieldOption.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/schema/array.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/InternationalizedField.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/getToneFromValidation.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/components/InternationalizedInput.tsx", "../../../../../node_modules/sanity-plugin-internationalized-array/src/schema/object.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/utils/flattenSchemaType.ts", "../../../../../node_modules/sanity-plugin-internationalized-array/src/plugin.tsx"],
  "sourcesContent": ["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n", "const isPromise = promise => typeof promise === 'object' && typeof promise.then === 'function';\n\nconst globalCache = [];\n\nfunction shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nfunction query(fn, keys = null, preload = false, config = {}) {\n  // If no keys were given, the function is the key\n  if (keys === null) keys = [fn];\n\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) {\n        if (config.lifespan && config.lifespan > 0) {\n          if (entry.timeout) clearTimeout(entry.timeout);\n          entry.timeout = setTimeout(entry.remove, config.lifespan);\n        }\n\n        return entry.response;\n      } // If the promise is still unresolved, throw\n\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    remove: () => {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    },\n    promise: // Execute the promise\n    (isPromise(fn) ? fn : fn(...keys) // When it resolves, store its value\n    ).then(response => {\n      entry.response = response; // Remove the entry in time if a lifespan was given\n\n      if (config.lifespan && config.lifespan > 0) {\n        entry.timeout = setTimeout(entry.remove, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n    if (entry) entry.remove();\n  }\n};\n\nexport { clear, peek, preload, suspend };\n", "import type {SchemaType} from 'sanity'\n\nimport type {FilterFieldFunction, LanguageFilterConfig, LanguageFilterSchema} from './types'\n\nexport const defaultFilterField: FilterFieldFunction = (\n  enclosingType,\n  field,\n  selectedLanguageIds,\n) => !enclosingType.name.startsWith('locale') || selectedLanguageIds.includes(field.name)\n\nexport function isLanguageFilterEnabled(\n  schemaType: SchemaType | undefined,\n  options: LanguageFilterConfig,\n): boolean {\n  const schemaFilter =\n    isDocument(schemaType) && (schemaType as LanguageFilterSchema)?.options?.languageFilter\n  const defaultEnabled = !options.documentTypes\n\n  return !!(\n    (defaultEnabled && schemaFilter !== false) ||\n    (!defaultEnabled && schemaFilter) ||\n    (schemaType && options.documentTypes?.includes(schemaType.name))\n  )\n}\n\nfunction isDocument(schemaType?: SchemaType) {\n  return schemaType?.jsonType === 'object' && getRootType(schemaType).name === 'document'\n}\n\nfunction getRootType(schema: SchemaType): SchemaType {\n  if (schema.type) {\n    return getRootType(schema.type)\n  }\n  return schema\n}\n", "import {useState} from 'react'\n\nimport type {Language, LanguageFilterConfig} from './types'\nconst storageKey = '@sanity/plugin/language-filter/selected-languages'\n\nexport function getPersistedLanguageIds(options: LanguageFilterConfig): string[] {\n  const selectableLangs = getSelectableLanguages(options).map((l) => l.id)\n\n  let selected: string[] = selectableLangs\n  try {\n    const persistedValue = window.localStorage.getItem(storageKey)\n    if (persistedValue) {\n      selected = JSON.parse(persistedValue)\n    }\n  } catch (err) {} // eslint-disable-line no-empty\n\n  // constrain persisted/selected languages to the ones currently supported\n  selected = intersection(selected, selectableLangs)\n  return selected\n}\n\nexport function persistLanguageIds(languageIds: string[]): void {\n  window.localStorage.setItem(storageKey, JSON.stringify(languageIds))\n}\n\nfunction intersection(array1: string[], array2: string[]) {\n  return array1.filter((value) => array2.includes(value))\n}\n\nexport function getSelectableLanguages({\n  supportedLanguages,\n  defaultLanguages,\n}: LanguageFilterConfig): Language[] {\n  return Array.isArray(supportedLanguages)\n    ? supportedLanguages.filter((lang) => !defaultLanguages?.includes(lang.id))\n    : []\n}\n\nexport function useSelectedLanguageIds(\n  options: LanguageFilterConfig,\n): [string[], (ids: string[]) => void] {\n  return useState(() => [...(options.defaultLanguages ?? []), ...getPersistedLanguageIds(options)])\n}\n", "import {createContext, useContext, useEffect, useMemo, useState} from 'react'\nimport {type LayoutProps, useClient} from 'sanity'\n\nimport {defaultFilterField} from './filterField'\nimport type {\n  Language,\n  LanguageCallback,\n  LanguageFilterConfig,\n  LanguageFilterConfigProcessed,\n} from './types'\nimport {useSelectedLanguageIds} from './useSelectedLanguageIds'\n\nexport interface LanguageFilterStudioContextProps {\n  // eslint-disable-next-line react/require-default-props\n  options: Required<LanguageFilterConfig>\n}\n\nexport interface LanguageFilterStudioContextProcessed {\n  options: Required<LanguageFilterConfigProcessed>\n}\n\nexport interface LanguageFilterStudioContextValue extends LanguageFilterStudioContextProcessed {\n  selectedLanguageIds: string[]\n  setSelectedLanguageIds: (ids: string[]) => void\n}\n\nexport const defaultContextValue: LanguageFilterStudioContextValue = {\n  options: {\n    apiVersion: '2022-11-27',\n    supportedLanguages: [],\n    defaultLanguages: [],\n    documentTypes: [],\n    filterField: defaultFilterField,\n  },\n  selectedLanguageIds: [],\n  setSelectedLanguageIds: () => console.error('LanguageFilterStudioContext not initialized'),\n}\n\nconst LanguageFilterStudioContext =\n  createContext<LanguageFilterStudioContextValue>(defaultContextValue)\n\n/**\n * This is a separate Provider from the Context that wraps the document pane\n * but it used to listen to changes to the selected language IDs inside it\n * and provide them to a Studio-wide context\n */\nexport function LanguageFilterStudioProvider(\n  props: LayoutProps & LanguageFilterStudioContextProps,\n) {\n  const client = useClient({apiVersion: '2023-01-01'})\n  const [languages, setLanguages] = useState<Language[]>(\n    Array.isArray(props.options.supportedLanguages) ? props.options.supportedLanguages : [],\n  )\n  useEffect(() => {\n    let asyncLanguages: Language[] = []\n\n    async function getLanguages(supportedLanguagesCallback: LanguageCallback) {\n      asyncLanguages = await supportedLanguagesCallback(client, {})\n      setLanguages(asyncLanguages)\n    }\n\n    if (!Array.isArray(props.options.supportedLanguages)) {\n      getLanguages(props.options.supportedLanguages)\n    }\n  }, [client, props.options.supportedLanguages])\n\n  const options = useMemo<Required<LanguageFilterConfigProcessed>>(() => {\n    return {\n      ...defaultContextValue.options,\n      ...props.options,\n      supportedLanguages: languages,\n    }\n  }, [props.options, languages])\n\n  const [selectedLanguageIds, setSelectedLanguageIds] = useSelectedLanguageIds(options)\n\n  return (\n    <LanguageFilterStudioContext.Provider\n      value={{options, selectedLanguageIds, setSelectedLanguageIds}}\n    >\n      {props.renderDefault(props)}\n    </LanguageFilterStudioContext.Provider>\n  )\n}\n\n/**\n * Retrieves plugin options and the currently selected\n * language IDs from anywhere in the Studio\n */\nexport function useLanguageFilterStudioContext() {\n  return useContext(LanguageFilterStudioContext)\n}\n", "import {useCallback, useMemo} from 'react'\n\nimport {useLanguageFilterStudioContext} from './LanguageFilterStudioContext'\nimport {getSelectableLanguages, persistLanguageIds} from './useSelectedLanguageIds'\n\nconst unique = (arr: string[]) => Array.from(new Set(arr))\n\nexport function usePaneLanguages(): {\n  activeLanguages: string[]\n  allSelected: boolean\n  selectAll: () => void\n  selectNone: () => void\n  toggleLanguage: (languageId: string) => void\n} {\n  const {selectedLanguageIds, setSelectedLanguageIds, options} = useLanguageFilterStudioContext()\n  const {defaultLanguages = []} = options\n\n  const selectableLanguages = useMemo(() => getSelectableLanguages(options), [options])\n\n  const updateSelectedIds = useCallback(\n    (ids: string[]) => {\n      setSelectedLanguageIds(unique([...defaultLanguages, ...ids]))\n      persistLanguageIds(unique([...defaultLanguages, ...ids]))\n    },\n    [defaultLanguages, setSelectedLanguageIds],\n  )\n\n  const selectAll = useCallback(\n    () => updateSelectedIds(selectableLanguages.map((l) => l.id)),\n    [updateSelectedIds, selectableLanguages],\n  )\n\n  const selectNone = useCallback(() => {\n    updateSelectedIds(defaultLanguages)\n  }, [defaultLanguages, updateSelectedIds])\n\n  const toggleLanguage = useCallback(\n    (languageId: string) => {\n      let lang = selectedLanguageIds\n\n      if (lang.includes(languageId)) {\n        lang = lang.filter((l) => l !== languageId)\n      } else {\n        lang = unique([...lang, languageId])\n      }\n\n      updateSelectedIds(lang)\n    },\n    [updateSelectedIds, selectedLanguageIds],\n  )\n\n  const activeLanguages = useMemo(\n    () => unique([...(defaultLanguages ?? []), ...selectedLanguageIds]),\n    [defaultLanguages, selectedLanguageIds],\n  )\n\n  return {\n    activeLanguages,\n    allSelected:\n      selectedLanguageIds.length === selectableLanguages.length + defaultLanguages.length,\n    selectAll,\n    selectNone,\n    toggleLanguage,\n  }\n}\n", "import {\n  CheckmarkCircleIcon,\n  CircleIcon,\n  EyeClosedIcon,\n  EyeOpenIcon,\n  TranslateIcon,\n} from '@sanity/icons'\nimport {\n  Badge,\n  Box,\n  Button,\n  Card,\n  Flex,\n  Popover,\n  Stack,\n  Text,\n  TextInput,\n  useClickOutside,\n} from '@sanity/ui'\nimport {type FormEvent, type MouseEventHandler, useCallback, useState} from 'react'\nimport {TextWithTone} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useLanguageFilterStudioContext} from './LanguageFilterStudioContext'\nimport {usePaneLanguages} from './usePaneLanguages'\n\nconst StyledBox = styled(Box)`\n  max-height: calc(100vh - 200px);\n`\n\nexport function LanguageFilterMenuButton() {\n  const {options} = useLanguageFilterStudioContext()\n\n  const defaultLanguages = options.supportedLanguages.filter((l) =>\n    options.defaultLanguages?.includes(l.id),\n  )\n\n  const languageOptions = options.supportedLanguages.filter(\n    (l) => !options.defaultLanguages?.includes(l.id),\n  )\n  const [open, setOpen] = useState(false)\n  const {activeLanguages, allSelected, selectAll, selectNone, toggleLanguage} = usePaneLanguages()\n  const [button, setButton] = useState<HTMLElement | null>(null)\n  const [popover, setPopover] = useState<HTMLElement | null>(null)\n\n  const handleToggleAll: MouseEventHandler<HTMLButtonElement> = useCallback(\n    (event) => {\n      const checked = event.currentTarget.value === 'ALL'\n\n      if (checked) {\n        selectAll()\n      } else {\n        selectNone()\n      }\n    },\n    [selectAll, selectNone],\n  )\n\n  const handleClick = useCallback(() => setOpen((o) => !o), [])\n\n  const handleClickOutside = useCallback(() => setOpen(false), [])\n\n  useClickOutside(handleClickOutside, [button, popover])\n\n  const langCount = options.supportedLanguages.length\n\n  // Search filter query\n  const [query, setQuery] = useState('')\n  const handleQuery = useCallback((event: FormEvent<HTMLInputElement>) => {\n    if (event.currentTarget.value) {\n      setQuery(event.currentTarget.value)\n    } else {\n      setQuery('')\n    }\n  }, [])\n\n  const showSearch = langCount > 4\n\n  const content = (\n    <StyledBox overflow=\"auto\">\n      <Stack padding={1} space={1}>\n        {defaultLanguages.length > 0 && (\n          <>\n            {defaultLanguages.map((l) => (\n              <LanguageFilterOption key={l.id} id={l.id} title={l.title} selected />\n            ))}\n            <Card borderTop />\n          </>\n        )}\n\n        <Button\n          mode=\"bleed\"\n          onClick={handleToggleAll}\n          justify=\"flex-start\"\n          value={allSelected ? 'NONE' : 'ALL'}\n          disabled={!!query}\n        >\n          <Flex gap={3} align=\"center\">\n            <Text size={2}>\n              {allSelected ? (\n                <TextWithTone tone=\"primary\">\n                  <EyeClosedIcon />\n                </TextWithTone>\n              ) : (\n                <EyeOpenIcon />\n              )}\n            </Text>\n            <Box flex={1}>\n              <Text>{allSelected ? 'Hide all' : 'Show all'}</Text>\n            </Box>\n          </Flex>\n        </Button>\n\n        {showSearch ? (\n          <TextInput onChange={handleQuery} value={query} placeholder=\"Filter languages\" />\n        ) : (\n          <Card borderTop />\n        )}\n\n        {languageOptions\n          .filter((language) => {\n            if (query) {\n              return language.title.toLowerCase().includes(query.toLowerCase())\n            }\n            return true\n          })\n          .map((lang) => (\n            <LanguageFilterOption\n              id={lang.id}\n              key={lang.id}\n              onToggle={toggleLanguage}\n              selected={activeLanguages.includes(lang.id)}\n              title={lang.title}\n            />\n          ))}\n      </Stack>\n    </StyledBox>\n  )\n\n  const buttonText =\n    activeLanguages.length === langCount\n      ? 'Showing all'\n      : `Showing ${activeLanguages.length} / ${langCount}`\n  return (\n    <Popover animate content={content} open={open} portal ref={setPopover}>\n      <Button\n        text={buttonText}\n        icon={TranslateIcon}\n        mode=\"bleed\"\n        onClick={handleClick}\n        ref={setButton}\n        selected={open}\n      />\n    </Popover>\n  )\n}\n\nfunction LanguageFilterOption(props: {\n  id: string\n  selected: boolean\n  title: string\n  // eslint-disable-next-line react/require-default-props\n  onToggle?: (id: string) => void\n}) {\n  const {id, onToggle, selected, title} = props\n\n  const handleChange = useCallback(() => {\n    if (onToggle) {\n      onToggle(id)\n    }\n  }, [id, onToggle])\n\n  const disabled = !onToggle\n\n  return (\n    <Button mode=\"bleed\" onClick={handleChange} justify=\"flex-start\" disabled={disabled}>\n      <Flex gap={3} align=\"center\">\n        <Text size={2}>\n          {selected ? (\n            <TextWithTone tone={disabled ? 'default' : 'positive'}>\n              <CheckmarkCircleIcon />\n            </TextWithTone>\n          ) : (\n            <CircleIcon />\n          )}\n        </Text>\n        <Box flex={1}>\n          <Text>{title}</Text>\n        </Box>\n        <Badge>{id}</Badge>\n      </Flex>\n    </Button>\n  )\n}\n", "import {useMemo} from 'react'\nimport {type ObjectInputProps, type ObjectMember, useFormValue, useSchema} from 'sanity'\n\nimport {isLanguageFilterEnabled} from './filterField'\nimport {useLanguageFilterStudioContext} from './LanguageFilterStudioContext'\n\n// First check that this Object is in a schema type for which language-filter is enabled\nexport function FilteredObjectWrapper(props: ObjectInputProps) {\n  const {options} = useLanguageFilterStudioContext()\n\n  const documentType = useFormValue(['_type']) as string\n  const schema = useSchema()\n  const languageFilterEnabled = isLanguageFilterEnabled(schema.get(documentType), options)\n  return languageFilterEnabled ? <FilteredObjectInput {...props} /> : props.renderDefault(props)\n}\n\n// Modify the object members based on selected languages in the filter\nexport function FilteredObjectInput(props: ObjectInputProps) {\n  const {members: membersProp, schemaType, renderDefault, ...restProps} = props\n  const {selectedLanguageIds, options} = useLanguageFilterStudioContext()\n  const {filterField} = options\n\n  const members: ObjectMember[] = useMemo(() => {\n    return membersProp\n      .filter((member) => {\n        return (\n          (member.kind === 'field' && filterField(schemaType, member, selectedLanguageIds)) ||\n          member.kind === 'fieldSet' ||\n          member.kind === 'error'\n        )\n      })\n      .map((member) => {\n        if (member.kind === 'fieldSet') {\n          return {\n            ...member,\n            fieldSet: {\n              ...member.fieldSet,\n              members: member.fieldSet.members.filter((fieldsetMember) => {\n                return (\n                  fieldsetMember.kind === 'field' &&\n                  filterField(schemaType, fieldsetMember, selectedLanguageIds)\n                )\n              }),\n            },\n          }\n        }\n        return member\n      })\n  }, [schemaType, membersProp, filterField, selectedLanguageIds])\n\n  return renderDefault({...restProps, members, schemaType, renderDefault})\n}\n", "import {\n  definePlugin,\n  type DocumentLanguageFilterComponent,\n  isObjectSchemaType,\n  type ObjectInputProps,\n} from 'sanity'\n\nimport {isLanguageFilterEnabled} from './filterField'\nimport {LanguageFilterMenuButton} from './LanguageFilterMenuButton'\nimport {FilteredObjectWrapper} from './LanguageFilterObjectInput'\nimport {defaultContextValue, LanguageFilterStudioProvider} from './LanguageFilterStudioContext'\nimport type {LanguageFilterConfig} from './types'\n\n/**\n * ## Usage in sanity.config.ts (or .js)\n *\n * ```\n * import {defineConfig} from 'sanity'\n * import {languageFilter} from '@sanity/language-filter'\n *\n * export const defineConfig({\n *     /...\n *     plugins: [\n *         languageFilter({\n *             supportedLanguages: [\n *               {id: 'nb', title: 'Norwegian (Bokmål)'},\n *               {id: 'nn', title: 'Norwegian (Nynorsk)'},\n *               {id: 'en', title: 'English'},\n *               {id: 'es', title: 'Spanish'},\n *               {id: 'arb', title: 'Arabic'},\n *               {id: 'pt', title: 'Portuguese'},\n *               //...\n *             ],\n *             // Select Norwegian (Bokmål) by default\n *             defaultLanguages: ['nb'],\n *             // Only show language filter for document type `page` (schemaType.name)\n *             // Can also enable via document-options: options.languageFilter: true\n *             documentTypes: ['page'],\n *             // default filter function shown\n *             filterField: (enclosingType, field, selectedLanguageIds) =>\n *               !enclosingType.name.startsWith('locale') || selectedLanguageIds.includes(field.name),\n *        })\n *    ]\n * })\n * ```\n */\nexport const languageFilter = definePlugin<LanguageFilterConfig>((options) => {\n  const RenderLanguageFilter: DocumentLanguageFilterComponent = () => {\n    return <LanguageFilterMenuButton />\n  }\n\n  const pluginOptions = {\n    ...defaultContextValue.options,\n    ...options,\n  }\n\n  return {\n    name: '@sanity/language-filter',\n    studio: {\n      components: {\n        layout: (props) => LanguageFilterStudioProvider({...props, options: pluginOptions}),\n      },\n    },\n\n    document: {\n      unstable_languageFilter: (prev, {schemaType, schema}) => {\n        if (isLanguageFilterEnabled(schema.get(schemaType), options)) {\n          return [...prev, RenderLanguageFilter]\n        }\n        return prev\n      },\n    },\n\n    form: {\n      components: {\n        input: (props) => {\n          if (props.id !== 'root' && isObjectSchemaType(props.schemaType)) {\n            return FilteredObjectWrapper(props as ObjectInputProps)\n          }\n\n          return props.renderDefault(props)\n        },\n      },\n    },\n  }\n})\n", "/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport * as suspend from 'suspend-react'\n\nimport type {Language} from './types'\n\nexport const namespace = 'sanity-plugin-internationalized-array'\n\nexport const version = 'v1'\n\n// https://github.com/pmndrs/suspend-react#preloading\nexport const preload = (fn: () => Promise<Language[]>) =>\n  suspend.preload(() => fn(), [version, namespace])\n\n// https://github.com/pmndrs/suspend-react#cache-busting\nexport const clear = () => suspend.clear([version, namespace])\n\n// https://github.com/pmndrs/suspend-react#peeking-into-entries-outside-of-suspense\nexport const peek = (selectedValue: Record<string, unknown>) =>\n  suspend.peek([version, namespace, selectedValue]) as Language[] | undefined\n", "import {PluginConfig} from './types'\n\nexport const MAX_COLUMNS = {\n  codeOnly: 5,\n  titleOnly: 4,\n  titleAndCode: 3,\n}\n\nexport const CONFIG_DEFAULT: Required<PluginConfig> = {\n  languages: [],\n  select: {},\n  defaultLanguages: [],\n  fieldTypes: [],\n  apiVersion: '2022-11-27',\n  buttonLocations: ['field'],\n  buttonAddAll: true,\n  languageDisplay: 'codeOnly',\n}\n", "import {SanityDocument} from 'sanity'\n\nexport interface DocumentsToTranslate {\n  path: (string | number)[]\n  pathString: string\n  _key: string\n  _type: string\n  [key: string]: unknown\n}\n\nexport const getDocumentsToTranslate = (\n  value: SanityDocument | unknown,\n  rootPath: (string | number)[] = []\n): DocumentsToTranslate[] => {\n  if (Array.isArray(value)) {\n    const arrayRootPath = [...rootPath]\n\n    // if item contains internationalized return array\n    const internationalizedValues = value.filter((item) => {\n      if (Array.isArray(item)) return false\n\n      if (typeof item === 'object') {\n        const type = item?._type as string | undefined\n        return (\n          type?.startsWith('internationalizedArray') && type?.endsWith('Value')\n        )\n      }\n      return false\n    })\n\n    if (internationalizedValues.length > 0) {\n      return internationalizedValues.map((internationalizedValue) => {\n        return {\n          ...internationalizedValue,\n          path: arrayRootPath,\n          pathString: arrayRootPath.join('.'),\n        }\n      })\n    }\n\n    if (value.length > 0) {\n      return value\n        .map((item, index) =>\n          getDocumentsToTranslate(item, [...arrayRootPath, index])\n        )\n        .flat()\n    }\n\n    return []\n  }\n  if (typeof value === 'object' && value) {\n    const startsWithUnderscoreRegex = /^_/\n    const itemKeys = Object.keys(value).filter(\n      (key) => !key.match(startsWithUnderscoreRegex)\n    ) as (keyof typeof value)[]\n\n    return itemKeys\n      .map((item) => {\n        const selectedValue = value[item] as unknown\n        const path = [...rootPath, item]\n        return getDocumentsToTranslate(selectedValue, path)\n      })\n      .flat()\n  }\n  return []\n}\n", "import {LanguageDisplay} from '../types'\n\nexport function getLanguageDisplay(\n  languageDisplay: LanguageDisplay,\n  title: string,\n  code: string\n): string {\n  if (languageDisplay === 'codeOnly') return code.toUpperCase()\n  if (languageDisplay === 'titleOnly') return title\n  if (languageDisplay === 'titleAndCode')\n    return `${title} (${code.toUpperCase()})`\n  return title\n}\n", "import {AddIcon} from '@sanity/icons'\nimport {Button, Grid} from '@sanity/ui'\nimport type React from 'react'\nimport {memo} from 'react'\n\nimport {MAX_COLUMNS} from '../constants'\nimport type {Language, Value} from '../types'\nimport {getLanguageDisplay} from '../utils/getLanguageDisplay'\nimport {useInternationalizedArrayContext} from './InternationalizedArrayContext'\n\ntype AddButtonsProps = {\n  languages: Language[]\n  readOnly: boolean\n  value: Value[] | undefined\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nfunction AddButtons(props: AddButtonsProps) {\n  const {languages, readOnly, value, onClick} = props\n  const {languageDisplay} = useInternationalizedArrayContext()\n\n  return languages.length > 0 ? (\n    <Grid\n      columns={Math.min(languages.length, MAX_COLUMNS[languageDisplay])}\n      gap={2}\n    >\n      {languages.map((language) => {\n        const languageTitle: string = getLanguageDisplay(\n          languageDisplay,\n          language.title,\n          language.id\n        )\n        return (\n          <Button\n            key={language.id}\n            tone=\"primary\"\n            mode=\"ghost\"\n            fontSize={1}\n            disabled={\n              readOnly ||\n              Boolean(value?.find((item) => item._key === language.id))\n            }\n            text={languageTitle}\n            // Only show plus icon if there's one row or less AND only showing codes\n            icon={\n              languages.length > MAX_COLUMNS[languageDisplay] &&\n              languageDisplay === 'codeOnly'\n                ? undefined\n                : AddIcon\n            }\n            value={language.id}\n            onClick={onClick}\n          />\n        )\n      })}\n    </Grid>\n  ) : null\n}\n\nexport default memo(AddButtons)\n", "import {Box, Stack, Text, useToast} from '@sanity/ui'\nimport React, {useCallback} from 'react'\nimport {\n  FormInsertPatch,\n  FormSetIfMissingPatch,\n  insert,\n  isSanityDocument,\n  PatchEvent,\n  setIfMissing,\n} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\n\nimport {\n  DocumentsToTranslate,\n  getDocumentsToTranslate,\n} from '../utils/getDocumentsToTranslate'\nimport AddButtons from './AddButtons'\nimport {useInternationalizedArrayContext} from './InternationalizedArrayContext'\n\ntype DocumentAddButtonsProps = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: Record<string, any> | undefined\n}\nexport default function DocumentAddButtons(props: DocumentAddButtonsProps) {\n  const {filteredLanguages} = useInternationalizedArrayContext()\n  const value = isSanityDocument(props.value) ? props.value : undefined\n\n  const toast = useToast()\n  const {onChange} = useDocumentPane()\n\n  const documentsToTranslation = getDocumentsToTranslate(value, [])\n\n  const handleDocumentButtonClick = useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      const languageId = event.currentTarget.value\n      if (!languageId) {\n        toast.push({\n          status: 'error',\n          title: 'No language selected',\n        })\n        return\n      }\n      const alreadyTranslated = documentsToTranslation.filter(\n        (translation) => translation?._key === languageId\n      )\n      const removeDuplicates = documentsToTranslation.reduce<\n        DocumentsToTranslate[]\n      >((filteredTranslations, translation) => {\n        if (\n          alreadyTranslated.filter(\n            (alreadyTranslation) =>\n              alreadyTranslation.pathString === translation.pathString\n          ).length > 0\n        ) {\n          return filteredTranslations\n        }\n        const translationAlreadyExists = filteredTranslations.filter(\n          (filteredTranslation) => filteredTranslation.path === translation.path\n        )\n\n        if (translationAlreadyExists.length > 0) {\n          return filteredTranslations\n        }\n        return [...filteredTranslations, translation]\n      }, [])\n      if (removeDuplicates.length === 0) {\n        toast.push({\n          status: 'error',\n          title: 'No internationalizedArray fields found in document root',\n        })\n        return\n      }\n\n      // Write a new patch for each empty field\n      const patches: (FormSetIfMissingPatch | FormInsertPatch)[] = []\n\n      for (const toTranslate of removeDuplicates) {\n        const path = toTranslate.path\n\n        const ifMissing = setIfMissing([], path)\n        const insertValue = insert(\n          [\n            {\n              _key: languageId,\n              _type: toTranslate._type,\n              value: undefined,\n            },\n          ],\n          'after',\n          [...path, -1]\n        )\n        patches.push(ifMissing)\n        patches.push(insertValue)\n      }\n\n      onChange(PatchEvent.from(patches.flat()))\n    },\n    [documentsToTranslation, onChange, toast]\n  )\n  return (\n    <Stack space={3}>\n      <Box>\n        <Text size={1} weight=\"semibold\">\n          Add translation to internationalized fields\n        </Text>\n      </Box>\n      <AddButtons\n        languages={filteredLanguages}\n        readOnly={false}\n        value={undefined}\n        onClick={handleDocumentButtonClick}\n      />\n    </Stack>\n  )\n}\n", "import {get} from 'lodash'\n\nexport const getSelectedValue = (\n  select: Record<string, string> | undefined,\n  document:\n    | {\n        [x: string]: unknown\n      }\n    | undefined\n): Record<string, unknown> => {\n  if (!select || !document) {\n    return {}\n  }\n\n  const selection: Record<string, string> = select || {}\n  const selectedValue: Record<string, unknown> = {}\n  for (const [key, path] of Object.entries(selection)) {\n    let value = get(document, path)\n    if (Array.isArray(value)) {\n      // If there are references in the array, ensure they have `_ref` set, otherwise they are considered empty and can safely be ignored\n      value = value.filter((item) =>\n        typeof item === 'object'\n          ? item?._type === 'reference' && '_ref' in item\n          : true\n      )\n    }\n    selectedValue[key] = value\n  }\n\n  return selectedValue\n}\n", "import {useLanguageFilterStudioContext} from '@sanity/language-filter'\nimport {Stack} from '@sanity/ui'\nimport equal from 'fast-deep-equal'\nimport {createContext, useContext, useDeferredValue, useMemo} from 'react'\nimport {type ObjectInputProps, useClient, useWorkspace} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\nimport {suspend} from 'suspend-react'\n\nimport {namespace, version} from '../cache'\nimport {CONFIG_DEFAULT} from '../constants'\nimport type {Language, PluginConfig} from '../types'\nimport DocumentAddButtons from './DocumentAddButtons'\nimport {getSelectedValue} from './getSelectedValue'\n\n// This provider makes the plugin config available to all components in the document form\n// But with languages resolved and filtered languages updated base on @sanity/language-filter\n\ntype InternationalizedArrayContextProps = Required<PluginConfig> & {\n  languages: Language[]\n  filteredLanguages: Language[]\n}\n\nexport const InternationalizedArrayContext =\n  createContext<InternationalizedArrayContextProps>({\n    ...CONFIG_DEFAULT,\n    languages: [],\n    filteredLanguages: [],\n  })\n\nexport function useInternationalizedArrayContext() {\n  return useContext(InternationalizedArrayContext)\n}\n\ntype InternationalizedArrayProviderProps = ObjectInputProps & {\n  internationalizedArray: Required<PluginConfig>\n}\n\nexport function InternationalizedArrayProvider(\n  props: InternationalizedArrayProviderProps\n) {\n  const {internationalizedArray} = props\n\n  const client = useClient({apiVersion: internationalizedArray.apiVersion})\n  const workspace = useWorkspace()\n  const {formState} = useDocumentPane()\n  const deferredDocument = useDeferredValue(formState?.value)\n  const selectedValue = useMemo(\n    () => getSelectedValue(internationalizedArray.select, deferredDocument),\n    [internationalizedArray.select, deferredDocument]\n  )\n\n  // Fetch or return languages\n  const languages = Array.isArray(internationalizedArray.languages)\n    ? internationalizedArray.languages\n    : suspend(\n        // eslint-disable-next-line require-await\n        async () => {\n          if (typeof internationalizedArray.languages === 'function') {\n            return internationalizedArray.languages(client, selectedValue)\n          }\n          return internationalizedArray.languages\n        },\n        [version, namespace, selectedValue, workspace],\n        {equal}\n      )\n\n  // Filter out some languages if language filter is enabled\n  const {selectedLanguageIds, options: languageFilterOptions} =\n    useLanguageFilterStudioContext()\n\n  const filteredLanguages = useMemo(() => {\n    const documentType = deferredDocument ? deferredDocument._type : undefined\n    const languageFilterEnabled =\n      typeof documentType === 'string' &&\n      languageFilterOptions.documentTypes.includes(documentType)\n\n    return languageFilterEnabled\n      ? languages.filter((language) =>\n          selectedLanguageIds.includes(language.id)\n        )\n      : languages\n  }, [deferredDocument, languageFilterOptions, languages, selectedLanguageIds])\n\n  const showDocumentButtons =\n    internationalizedArray.buttonLocations.includes('document')\n  const context = useMemo(\n    () => ({...internationalizedArray, languages, filteredLanguages}),\n    [filteredLanguages, internationalizedArray, languages]\n  )\n\n  return (\n    <InternationalizedArrayContext.Provider value={context}>\n      {showDocumentButtons ? (\n        <Stack space={5}>\n          <DocumentAddButtons value={props.value} />\n          {props.renderDefault(props)}\n        </Stack>\n      ) : (\n        props.renderDefault(props)\n      )}\n    </InternationalizedArrayContext.Provider>\n  )\n}\n", "import {memo} from 'react'\nimport {useClient} from 'sanity'\n\nimport {peek, preload} from '../cache'\nimport type {PluginConfig} from '../types'\n\nexport default memo(function Preload(\n  props: Required<Pick<PluginConfig, 'apiVersion' | 'languages'>>\n) {\n  const client = useClient({apiVersion: props.apiVersion})\n  if (!Array.isArray(peek({}))) {\n    // eslint-disable-next-line require-await\n    preload(async () =>\n      Array.isArray(props.languages)\n        ? props.languages\n        : props.languages(client, {})\n    )\n  }\n\n  return null\n})\n", "import {Language, Value} from '../types'\n\nexport function checkAllLanguagesArePresent(\n  languages: Language[],\n  value: Value[] | undefined\n): boolean {\n  const filteredLanguageIds = languages.map((l) => l.id)\n  const languagesInUseIds = value ? value.map((v) => v._key) : []\n\n  return (\n    languagesInUseIds.length === filteredLanguageIds.length &&\n    languagesInUseIds.every((l) => filteredLanguageIds.includes(l))\n  )\n}\n", "import {Language, Value} from '../types'\n\nexport function createAddAllTitle(\n  value: Value[] | undefined,\n  languages: Language[]\n): string {\n  if (value?.length) {\n    return `Add missing ${\n      languages.length - value.length === 1 ? `language` : `languages`\n    }`\n  }\n\n  return languages.length === 1\n    ? `Add ${languages[0].title} Field`\n    : `Add all languages`\n}\n", "import {SchemaType} from 'sanity'\n\nexport function createValueSchemaTypeName(schemaType: SchemaType): string {\n  return `${schemaType.name}Value`\n}\n", "import {FormInsertPatch, insert, Path, SchemaType} from 'sanity'\n\nimport {Language, Value} from '../types'\nimport {createValueSchemaTypeName} from './createValueSchemaTypeName'\n\ntype AddConfig = {\n  // New keys to add to the field\n  addLanguageKeys: string[]\n  // Schema of the current field\n  schemaType: SchemaType\n  // All languages registered in the plugin\n  languages: Language[]\n  // Languages that are currently visible\n  filteredLanguages: Language[]\n  // Current value of the internationalizedArray field\n  value?: Value[]\n  // Path to this item\n  path?: Path\n}\n\nexport function createAddLanguagePatches(config: AddConfig): FormInsertPatch[] {\n  const {\n    addLanguageKeys,\n    schemaType,\n    languages,\n    filteredLanguages,\n    value,\n    path = [],\n  } = config\n\n  const itemBase = {_type: createValueSchemaTypeName(schemaType)}\n\n  // Create new items\n  const getNewItems = () => {\n    if (Array.isArray(addLanguageKeys) && addLanguageKeys.length > 0) {\n      return addLanguageKeys.map((id) => ({\n        ...itemBase,\n        _key: id,\n      }))\n    }\n\n    return filteredLanguages\n      .filter((language) =>\n        value?.length ? !value.find((v) => v._key === language.id) : true\n      )\n      .map((language) => ({\n        ...itemBase,\n        _key: language.id,\n      }))\n  }\n  const newItems = getNewItems()\n\n  // Insert new items in the correct order\n  const languagesInUse = value?.length ? value.map((v) => v) : []\n\n  const insertions = newItems.map((item) => {\n    // What's the original index of this language?\n    const languageIndex = languages.findIndex((l) => item._key === l.id)\n\n    // What languages are there beyond that index?\n    const remainingLanguages = languages.slice(languageIndex + 1)\n\n    // So what is the index in the current value array of the next language in the language array?\n    const nextLanguageIndex = languagesInUse.findIndex((l) =>\n      // eslint-disable-next-line max-nested-callbacks\n      remainingLanguages.find((r) => r.id === l._key)\n    )\n\n    // Keep local state up to date incase multiple insertions are being made\n    if (nextLanguageIndex < 0) {\n      languagesInUse.push(item)\n    } else {\n      languagesInUse.splice(nextLanguageIndex, 0, item)\n    }\n\n    return nextLanguageIndex < 0\n      ? // No next language (-1), add to end of array\n        insert([item], 'after', [...path, nextLanguageIndex])\n      : // Next language found, insert before that\n        insert([item], 'before', [...path, nextLanguageIndex])\n  })\n\n  return insertions\n}\n", "import {AddIcon, TranslateIcon} from '@sanity/icons'\nimport {useCallback} from 'react'\nimport {\n  defineDocumentFieldAction,\n  type DocumentFieldActionItem,\n  type DocumentFieldActionProps,\n  PatchEvent,\n  setIfMissing,\n  useFormValue,\n} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\n\nimport {useInternationalizedArrayContext} from '../components/InternationalizedArrayContext'\nimport type {Language, Value} from '../types'\nimport {checkAllLanguagesArePresent} from '../utils/checkAllLanguagesArePresent'\nimport {createAddAllTitle} from '../utils/createAddAllTitle'\nimport {createAddLanguagePatches} from '../utils/createAddLanguagePatches'\n\nconst createTranslateFieldActions: (\n  fieldActionProps: DocumentFieldActionProps,\n  context: {\n    languages: Language[]\n    filteredLanguages: Language[]\n  }\n) => DocumentFieldActionItem[] = (\n  fieldActionProps,\n  {languages, filteredLanguages}\n) =>\n  languages.map((language) => {\n    const value = useFormValue(fieldActionProps.path) as Value[]\n    const disabled =\n      value && Array.isArray(value)\n        ? Boolean(value?.find((item) => item._key === language.id))\n        : false\n    const hidden = !filteredLanguages.some((f) => f.id === language.id)\n\n    const {onChange} = useDocumentPane()\n\n    const onAction = useCallback(() => {\n      const {schemaType, path} = fieldActionProps\n\n      const addLanguageKeys = [language.id]\n      const patches = createAddLanguagePatches({\n        addLanguageKeys,\n        schemaType,\n        languages,\n        filteredLanguages,\n        value,\n        path,\n      })\n\n      onChange(PatchEvent.from([setIfMissing([], path), ...patches]))\n    }, [language.id, value, onChange])\n\n    return {\n      type: 'action',\n      icon: AddIcon,\n      onAction,\n      title: language.title,\n      hidden,\n      disabled,\n    }\n  })\n\nconst AddMissingTranslationsFieldAction: (\n  fieldActionProps: DocumentFieldActionProps,\n  context: {\n    languages: Language[]\n    filteredLanguages: Language[]\n  }\n) => DocumentFieldActionItem = (\n  fieldActionProps,\n  {languages, filteredLanguages}\n) => {\n  const value = useFormValue(fieldActionProps.path) as Value[]\n  const disabled = value && value.length === filteredLanguages.length\n  const hidden = checkAllLanguagesArePresent(filteredLanguages, value)\n\n  const {onChange} = useDocumentPane()\n\n  const onAction = useCallback(() => {\n    const {schemaType, path} = fieldActionProps\n\n    const addLanguageKeys: string[] = []\n    const patches = createAddLanguagePatches({\n      addLanguageKeys,\n      schemaType,\n      languages,\n      filteredLanguages,\n      value,\n      path,\n    })\n\n    onChange(PatchEvent.from([setIfMissing([], path), ...patches]))\n  }, [fieldActionProps, filteredLanguages, languages, onChange, value])\n\n  return {\n    type: 'action',\n    icon: AddIcon,\n    onAction,\n    title: createAddAllTitle(value, filteredLanguages),\n    disabled,\n    hidden,\n  }\n}\n\nexport const internationalizedArrayFieldAction = defineDocumentFieldAction({\n  name: 'internationalizedArray',\n  useAction(fieldActionProps) {\n    const isInternationalizedArrayField =\n      fieldActionProps?.schemaType?.type?.name.startsWith(\n        'internationalizedArray'\n      )\n    const {languages, filteredLanguages} = useInternationalizedArrayContext()\n\n    const translateFieldActions = createTranslateFieldActions(\n      fieldActionProps,\n      {languages, filteredLanguages}\n    )\n\n    return {\n      type: 'group',\n      icon: TranslateIcon,\n      title: 'Add Translation',\n      renderAsButton: true,\n      children: isInternationalizedArrayField\n        ? [\n            ...translateFieldActions,\n            AddMissingTranslationsFieldAction(fieldActionProps, {\n              languages,\n              filteredLanguages,\n            }),\n          ]\n        : [],\n      hidden: !isInternationalizedArrayField,\n    }\n  },\n})\n", "export function camelCase(string: string): string {\n  return string.replace(/-([a-z])/g, (g) => g[1].toUpperCase())\n}\n\nexport function titleCase(string: string): string {\n  return string\n    .split(` `)\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(` `)\n}\n\nexport function pascalCase(string: string): string {\n  return titleCase(camelCase(string))\n}\n\nexport function createFieldName(name: string, addValue = false): string {\n  return addValue\n    ? [`internationalizedArray`, pascalCase(name), `Value`].join(``)\n    : [`internationalizedArray`, pascalCase(name)].join(``)\n}\n", "import {Card, Code, Stack, Text} from '@sanity/ui'\n\nconst schemaExample = {\n  languages: [\n    {id: 'en', title: 'English'},\n    {id: 'no', title: 'Norsk'},\n  ],\n}\n\nexport default function Feedback() {\n  return (\n    <Card tone=\"caution\" border radius={2} padding={3}>\n      <Stack space={4}>\n        <Text>\n          An array of language objects must be passed into the{' '}\n          <code>internationalizedArray</code> helper function, each with an{' '}\n          <code>id</code> and <code>title</code> field. Example:\n        </Text>\n        <Card padding={2} border radius={2}>\n          <Code size={1} language=\"javascript\">\n            {JSON.stringify(schemaExample, null, 2)}\n          </Code>\n        </Card>\n      </Stack>\n    </Card>\n  )\n}\n", "import {AddIcon} from '@sanity/icons'\nimport {useLanguageFilterStudioContext} from '@sanity/language-filter'\nimport {Button, Card, Stack, Text, useToast} from '@sanity/ui'\nimport type React from 'react'\nimport {useCallback, useEffect, useMemo} from 'react'\nimport {\n  type ArrayOfObjectsInputProps,\n  ArrayOfObjectsItem,\n  type ArraySchemaType,\n  MemberItemError,\n  set,\n  setIfMissing,\n  useFormValue,\n} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\n\nimport type {Value} from '../types'\nimport {checkAllLanguagesArePresent} from '../utils/checkAllLanguagesArePresent'\nimport {createAddAllTitle} from '../utils/createAddAllTitle'\nimport {createAddLanguagePatches} from '../utils/createAddLanguagePatches'\nimport AddButtons from './AddButtons'\nimport Feedback from './Feedback'\nimport {useInternationalizedArrayContext} from './InternationalizedArrayContext'\n\nexport type InternationalizedArrayProps = ArrayOfObjectsInputProps<\n  Value,\n  ArraySchemaType\n>\n\nexport default function InternationalizedArray(\n  props: InternationalizedArrayProps\n) {\n  const {members, value, schemaType, onChange} = props\n\n  const readOnly =\n    typeof schemaType.readOnly === 'boolean' ? schemaType.readOnly : false\n  const toast = useToast()\n\n  const {\n    languages,\n    filteredLanguages,\n    defaultLanguages,\n    buttonAddAll,\n    buttonLocations,\n  } = useInternationalizedArrayContext()\n\n  // Support updating the UI if languageFilter is installed\n  const {selectedLanguageIds, options: languageFilterOptions} =\n    useLanguageFilterStudioContext()\n  const documentType = useFormValue(['_type'])\n  const languageFilterEnabled =\n    typeof documentType === 'string' &&\n    languageFilterOptions.documentTypes.includes(documentType)\n\n  const filteredMembers = useMemo(\n    () =>\n      languageFilterEnabled\n        ? members.filter((member) => {\n            // This member is the outer object created by the plugin\n            // Satisfy TS\n            if (member.kind !== 'item') {\n              return false\n            }\n\n            // This is the inner \"value\" field member created by this plugin\n            const valueMember = member.item.members[0]\n\n            // Satisfy TS\n            if (valueMember.kind !== 'field') {\n              return false\n            }\n\n            return languageFilterOptions.filterField(\n              member.item.schemaType,\n              valueMember,\n              selectedLanguageIds\n            )\n          })\n        : members,\n    [languageFilterEnabled, members, languageFilterOptions, selectedLanguageIds]\n  )\n\n  const handleAddLanguage = useCallback(\n    async (\n      param?: React.MouseEvent<HTMLButtonElement, MouseEvent> | string[]\n    ) => {\n      if (!filteredLanguages?.length) {\n        return\n      }\n\n      const addLanguageKeys: string[] = Array.isArray(param)\n        ? param\n        : ([param?.currentTarget?.value].filter(Boolean) as string[])\n\n      const patches = createAddLanguagePatches({\n        addLanguageKeys,\n        schemaType,\n        languages,\n        filteredLanguages,\n        value,\n      })\n\n      onChange([setIfMissing([]), ...patches])\n    },\n    [filteredLanguages, languages, onChange, schemaType, value]\n  )\n\n  const {isDeleting} = useDocumentPane()\n\n  const addedLanguages = members.map(({key}) => key)\n  const hasAddedDefaultLanguages = defaultLanguages\n    .filter((language) => languages.find((l) => l.id === language))\n    .every((language) => addedLanguages.includes(language))\n\n  useEffect(() => {\n    if (!isDeleting && !hasAddedDefaultLanguages) {\n      const languagesToAdd = defaultLanguages\n        .filter((language) => !addedLanguages.includes(language))\n        .filter((language) => languages.find((l) => l.id === language))\n      // Account for strict mode by scheduling the update\n      const timeout = setTimeout(() => handleAddLanguage(languagesToAdd))\n      return () => clearTimeout(timeout)\n    }\n    return undefined\n  }, [\n    isDeleting,\n    hasAddedDefaultLanguages,\n    handleAddLanguage,\n    defaultLanguages,\n    addedLanguages,\n    languages,\n  ])\n\n  // TODO: This is reordering and re-setting the whole array, it could be surgical\n  const handleRestoreOrder = useCallback(() => {\n    if (!value?.length || !languages?.length) {\n      return\n    }\n\n    // Create a new value array in the correct order\n    // This would also strip out values that don't have a language as the key\n    const updatedValue = value\n      .reduce((acc, v) => {\n        const newIndex = languages.findIndex((l) => l.id === v?._key)\n\n        if (newIndex > -1) {\n          acc[newIndex] = v\n        }\n\n        return acc\n      }, [] as Value[])\n      .filter(Boolean)\n\n    if (value?.length !== updatedValue.length) {\n      toast.push({\n        title: 'There was an error reordering languages',\n        status: 'warning',\n      })\n    }\n\n    onChange(set(updatedValue))\n  }, [toast, languages, onChange, value])\n\n  const allKeysAreLanguages = useMemo(() => {\n    if (!value?.length || !languages?.length) {\n      return true\n    }\n\n    return value?.every((v) => languages.find((l) => l?.id === v?._key))\n  }, [value, languages])\n\n  // Check languages are in the correct order\n  const languagesInUse = useMemo(\n    () =>\n      languages && languages.length > 1\n        ? languages.filter((l) => value?.find((v) => v._key === l.id))\n        : [],\n    [languages, value]\n  )\n\n  const languagesOutOfOrder = useMemo(() => {\n    if (!value?.length || !languagesInUse.length) {\n      return []\n    }\n\n    return value\n      .map((v, vIndex) =>\n        vIndex === languagesInUse.findIndex((l) => l.id === v._key) ? null : v\n      )\n      .filter(Boolean)\n  }, [value, languagesInUse])\n\n  const languagesAreValid = useMemo(\n    () =>\n      !languages?.length ||\n      (languages?.length && languages.every((item) => item.id && item.title)),\n    [languages]\n  )\n\n  // Automatically restore order of fields\n  useEffect(() => {\n    if (languagesOutOfOrder.length > 0 && allKeysAreLanguages) {\n      handleRestoreOrder()\n    }\n  }, [languagesOutOfOrder, allKeysAreLanguages, handleRestoreOrder])\n\n  // compare value keys with possible languages\n  const allLanguagesArePresent = useMemo(\n    () => checkAllLanguagesArePresent(filteredLanguages, value),\n    [filteredLanguages, value]\n  )\n\n  if (!languagesAreValid) {\n    return <Feedback />\n  }\n\n  const addButtonsAreVisible =\n    // Plugin was configured to display buttons here (default!)\n    buttonLocations.includes('field') &&\n    // There's at least one language visible\n    filteredLanguages?.length > 0 &&\n    // Not every language has a value yet\n    !allLanguagesArePresent\n  const fieldHasMembers = members?.length > 0\n\n  return (\n    <Stack space={2}>\n      {fieldHasMembers ? (\n        <>\n          {filteredMembers.map((member) => {\n            if (member.kind === 'item') {\n              return (\n                <ArrayOfObjectsItem\n                  {...props}\n                  key={member.key}\n                  member={member}\n                />\n              )\n            }\n\n            return <MemberItemError key={member.key} member={member} />\n          })}\n        </>\n      ) : null}\n\n      {/* Give some feedback in the UI so the field doesn't look \"missing\" */}\n      {!addButtonsAreVisible && !fieldHasMembers ? (\n        <Card border tone=\"transparent\" padding={3} radius={2}>\n          <Text size={1}>\n            This internationalized field currently has no translations.\n          </Text>\n        </Card>\n      ) : null}\n\n      {addButtonsAreVisible ? (\n        <Stack space={2}>\n          <AddButtons\n            languages={filteredLanguages}\n            value={value}\n            readOnly={readOnly}\n            onClick={handleAddLanguage}\n          />\n          {buttonAddAll ? (\n            <Button\n              tone=\"primary\"\n              mode=\"ghost\"\n              disabled={readOnly || allLanguagesArePresent}\n              icon={AddIcon}\n              text={createAddAllTitle(value, filteredLanguages)}\n              onClick={handleAddLanguage}\n            />\n          ) : null}\n        </Stack>\n      ) : null}\n    </Stack>\n  )\n}\n", "import {SchemaType} from 'sanity'\n\nimport {ArrayFieldOptions} from '../schema/array'\n\nexport function getLanguagesFieldOption(\n  schemaType: SchemaType | undefined\n): ArrayFieldOptions['languages'] | undefined {\n  if (!schemaType) {\n    return undefined\n  }\n  const languagesOption = (schemaType.options as ArrayFieldOptions)?.languages\n  if (languagesOption) {\n    return languagesOption\n  }\n  return getLanguagesFieldOption(schemaType.type)\n}\n", "/* eslint-disable no-nested-ternary */\nimport {defineField, type FieldDefinition, type Rule} from 'sanity'\n\nimport {peek} from '../cache'\nimport {createFieldName} from '../components/createFieldName'\nimport {getSelectedValue} from '../components/getSelectedValue'\nimport InternationalizedArray from '../components/InternationalizedArray'\nimport type {Language, LanguageCallback, Value} from '../types'\nimport {getLanguagesFieldOption} from '../utils/getLanguagesFieldOption'\n\ntype ArrayFactoryConfig = {\n  apiVersion: string\n  select?: Record<string, string>\n  languages: Language[] | LanguageCallback\n  defaultLanguages?: string[]\n  type: string | FieldDefinition\n}\n\nexport type ArrayFieldOptions = Pick<\n  ArrayFactoryConfig,\n  'apiVersion' | 'select' | 'languages'\n>\n\nexport default (config: ArrayFactoryConfig): FieldDefinition<'array'> => {\n  const {apiVersion, select, languages, type} = config\n  const typeName = typeof type === `string` ? type : type.name\n  const arrayName = createFieldName(typeName)\n  const objectName = createFieldName(typeName, true)\n\n  return defineField({\n    name: arrayName,\n    title: 'Internationalized array',\n    type: 'array',\n    components: {\n      input: InternationalizedArray,\n    },\n    options: {\n      // @ts-expect-error - these options are required for validation rules – not the custom input component\n      apiVersion,\n      select,\n      languages,\n    },\n    of: [\n      defineField({\n        ...(typeof type === 'string' ? {} : type),\n        name: objectName,\n        type: objectName,\n      }),\n    ],\n    // @ts-expect-error - fix typings\n    validation: (rule: Rule) =>\n      rule.custom<Value[]>(async (value, context) => {\n        if (!value) {\n          return true\n        }\n\n        const selectedValue = getSelectedValue(select, context.document)\n        const client = context.getClient({apiVersion})\n\n        let contextLanguages: Language[] = []\n        const languagesFieldOption = getLanguagesFieldOption(context?.type)\n\n        if (Array.isArray(languagesFieldOption)) {\n          contextLanguages = languagesFieldOption\n        } else if (Array.isArray(peek(selectedValue))) {\n          contextLanguages = peek(selectedValue) || []\n        } else if (typeof languagesFieldOption === 'function') {\n          contextLanguages = await languagesFieldOption(client, selectedValue)\n        }\n\n        if (value && value.length > contextLanguages.length) {\n          return `Cannot be more than ${\n            contextLanguages.length === 1\n              ? `1 item`\n              : `${contextLanguages.length} items`\n          }`\n        }\n\n        const nonLanguageKeys = value?.length\n          ? value.filter(\n              (item) =>\n                !contextLanguages.find((language) => item._key === language.id)\n            )\n          : []\n        if (nonLanguageKeys.length) {\n          return {\n            message: `Array item keys must be valid languages registered to the field type`,\n            paths: nonLanguageKeys.map((item) => [{_key: item._key}]),\n          }\n        }\n\n        // Ensure there's no duplicate `language` fields\n        type KeyedValues = {\n          [key: string]: Value[]\n        }\n\n        const valuesByLanguage = value?.length\n          ? value\n              .filter((item) => Boolean(item?._key))\n              .reduce((acc, cur) => {\n                if (acc[cur._key]) {\n                  return {...acc, [cur._key]: [...acc[cur._key], cur]}\n                }\n                return {\n                  ...acc,\n                  [cur._key]: [cur],\n                }\n              }, {} as KeyedValues)\n          : {}\n        const duplicateValues = Object.values(valuesByLanguage)\n          .filter((item) => item?.length > 1)\n          .flat()\n        if (duplicateValues.length) {\n          return {\n            message: 'There can only be one field per language',\n            paths: duplicateValues.map((item) => [{_key: item._key}]),\n          }\n        }\n\n        return true\n      }),\n  })\n}\n", "import type {FieldProps} from 'sanity'\n\nexport default function InternationalizedField(props: FieldProps) {\n  // Show reference field selector if there's a value\n  if (props.schemaType.name === 'reference' && props.value) {\n    return props.renderDefault({\n      ...props,\n      title: '',\n      level: 0,\n    })\n  }\n\n  return props.children\n}\n", "import type {CardTone} from '@sanity/ui'\nimport type {FormNodeValidation} from 'sanity'\n\nexport function getToneFromValidation(\n  validations: FormNodeValidation[]\n): CardTone | undefined {\n  if (!validations?.length) {\n    return undefined\n  }\n\n  const validationLevels = validations.map((v) => v.level)\n\n  if (validationLevels.includes('error')) {\n    return `critical`\n  } else if (validationLevels.includes('warning')) {\n    return `caution`\n  }\n\n  return undefined\n}\n", "import {RemoveCircleIcon} from '@sanity/icons'\nimport {\n  Button,\n  Card,\n  Flex,\n  Label,\n  Menu,\n  MenuButton,\n  MenuItem,\n  Spinner,\n  Stack,\n  Text,\n  Tooltip,\n} from '@sanity/ui'\nimport type React from 'react'\nimport {useCallback, useMemo} from 'react'\nimport {type ObjectItemProps, useFormValue} from 'sanity'\nimport {set, unset} from 'sanity'\n\nimport {getLanguageDisplay} from '../utils/getLanguageDisplay'\nimport {getToneFromValidation} from './getToneFromValidation'\nimport {useInternationalizedArrayContext} from './InternationalizedArrayContext'\n\ntype InternationalizedValue = {\n  _type: string\n  _key: string\n  value: string\n}\n\nexport default function InternationalizedInput(\n  props: ObjectItemProps<InternationalizedValue>\n) {\n  const parentValue = useFormValue(\n    props.path.slice(0, -1)\n  ) as InternationalizedValue[]\n\n  const inlineProps = {\n    ...props.inputProps,\n    // This is the magic that makes inline editing work?\n    members: props.inputProps.members.filter(\n      (m) => m.kind === 'field' && m.name === 'value'\n    ),\n    // This just overrides the type\n    // TODO: Remove this as it shouldn't be necessary?\n    value: props.value as InternationalizedValue,\n  }\n\n  const {validation, value, onChange, readOnly} = inlineProps\n\n  // The parent array contains the languages from the plugin config\n  const {languages, languageDisplay, defaultLanguages} =\n    useInternationalizedArrayContext()\n\n  const languageKeysInUse = useMemo(\n    () => parentValue?.map((v) => v._key) ?? [],\n    [parentValue]\n  )\n  const keyIsValid = languages?.length\n    ? languages.find((l) => l.id === value._key)\n    : false\n\n  // Changes the key of this item, ideally to a valid language\n  const handleKeyChange = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      const languageId = event?.currentTarget?.value\n\n      if (\n        !value ||\n        !languages?.length ||\n        !languages.find((l) => l.id === languageId)\n      ) {\n        return\n      }\n\n      onChange([set(languageId, ['_key'])])\n    },\n    [onChange, value, languages]\n  )\n\n  // Removes this item from the array\n  const handleUnset = useCallback(() => {\n    onChange(unset())\n  }, [onChange])\n\n  if (!languages) {\n    return <Spinner />\n  }\n\n  const language = languages.find((l) => l.id === value._key)\n  const languageTitle: string =\n    keyIsValid && language\n      ? getLanguageDisplay(languageDisplay, language.title, language.id)\n      : ''\n\n  const isDefault = defaultLanguages.includes(value._key)\n\n  const removeButton = (\n    <Button\n      mode=\"bleed\"\n      icon={RemoveCircleIcon}\n      tone=\"critical\"\n      disabled={readOnly || isDefault}\n      onClick={handleUnset}\n    />\n  )\n\n  return (\n    <Card paddingTop={2} tone={getToneFromValidation(validation)}>\n      <Stack space={2}>\n        <Card tone=\"inherit\">\n          {keyIsValid ? (\n            <Label muted size={1}>\n              {languageTitle}\n            </Label>\n          ) : (\n            <MenuButton\n              button={<Button fontSize={1} text={`Change \"${value._key}\"`} />}\n              id={`${value._key}-change-key`}\n              menu={\n                <Menu>\n                  {languages.map((lang) => (\n                    <MenuItem\n                      disabled={languageKeysInUse.includes(lang.id)}\n                      fontSize={1}\n                      key={lang.id}\n                      text={lang.id.toLocaleUpperCase()}\n                      value={lang.id}\n                      // @ts-expect-error - fix typings\n                      onClick={handleKeyChange}\n                    />\n                  ))}\n                </Menu>\n              }\n              popover={{portal: true}}\n            />\n          )}\n        </Card>\n        <Flex align=\"center\" gap={2}>\n          <Card flex={1} tone=\"inherit\">\n            {props.inputProps.renderInput(props.inputProps)}\n          </Card>\n\n          <Card tone=\"inherit\">\n            {isDefault ? (\n              <Tooltip\n                content={\n                  <Text muted size={1}>\n                    Can&apos;t remove default language\n                  </Text>\n                }\n                fallbackPlacements={['right', 'left']}\n                placement=\"top\"\n                portal\n              >\n                <span>{removeButton}</span>\n              </Tooltip>\n            ) : (\n              removeButton\n            )}\n          </Card>\n        </Flex>\n      </Stack>\n    </Card>\n  )\n}\n", "import {defineField, FieldDefinition} from 'sanity'\n\nimport {createFieldName} from '../components/createFieldName'\nimport InternationalizedField from '../components/InternationalizedField'\nimport InternationalizedInput from '../components/InternationalizedInput'\n\ntype ObjectFactoryConfig = {\n  type: string | FieldDefinition\n}\n\nexport default (config: ObjectFactoryConfig): FieldDefinition<'object'> => {\n  const {type} = config\n  const typeName = typeof type === `string` ? type : type.name\n  const objectName = createFieldName(typeName, true)\n\n  return defineField({\n    name: objectName,\n    title: `Internationalized array ${type}`,\n    type: 'object',\n    components: {\n      // @ts-expect-error - fix typings\n      item: InternationalizedInput,\n    },\n    fields: [\n      typeof type === `string`\n        ? // Define a simple field if all we have is the name as a string\n          defineField({\n            name: 'value',\n            type,\n            components: {\n              field: InternationalizedField,\n            },\n          })\n        : // Pass in the configured options, but overwrite the name\n          {\n            ...type,\n            name: 'value',\n            components: {\n              field: InternationalizedField,\n            },\n          },\n    ],\n    preview: {\n      select: {\n        title: 'value',\n        subtitle: '_key',\n      },\n    },\n  })\n}\n", "import {\n  isDocumentSchemaType,\n  type ObjectField,\n  type Path,\n  type SchemaType,\n} from 'sanity'\n\ntype ObjectFieldWithPath = ObjectField<SchemaType> & {path: Path}\n\n/**\n * Flattens a document's schema type into a flat array of fields and includes their path\n */\nexport function flattenSchemaType(\n  schemaType: SchemaType\n): ObjectFieldWithPath[] {\n  if (!isDocumentSchemaType(schemaType)) {\n    console.error(`Schema type is not a document`)\n    return []\n  }\n\n  return extractInnerFields(schemaType.fields, [], 3)\n}\n\nfunction extractInnerFields(\n  fields: ObjectField<SchemaType>[],\n  path: Path,\n  maxDepth: number\n): ObjectFieldWithPath[] {\n  if (path.length >= maxDepth) {\n    return []\n  }\n\n  return fields.reduce<ObjectFieldWithPath[]>((acc, field) => {\n    const thisFieldWithPath = {path: [...path, field.name], ...field}\n\n    if (field.type.jsonType === 'object') {\n      const innerFields = extractInnerFields(\n        field.type.fields,\n        [...path, field.name],\n        maxDepth\n      )\n\n      return [...acc, thisFieldWithPath, ...innerFields]\n    } else if (\n      field.type.jsonType === 'array' &&\n      field.type.of.length &&\n      field.type.of.some((item) => 'fields' in item)\n    ) {\n      const innerFields = field.type.of.flatMap((innerField) =>\n        extractInnerFields(\n          // @ts-expect-error - Fix TS assertion for array fields\n          innerField.fields,\n          [...path, field.name],\n          maxDepth\n        )\n      )\n\n      return [...acc, thisFieldWithPath, ...innerFields]\n    }\n\n    return [...acc, thisFieldWithPath]\n  }, [])\n}\n", "import {definePlugin, isObjectInputProps} from 'sanity'\n\nimport {InternationalizedArrayProvider} from './components/InternationalizedArrayContext'\nimport Preload from './components/Preload'\nimport {CONFIG_DEFAULT} from './constants'\nimport {internationalizedArrayFieldAction} from './fieldActions'\nimport array from './schema/array'\nimport object from './schema/object'\nimport {PluginConfig} from './types'\nimport {flattenSchemaType} from './utils/flattenSchemaType'\n\nexport const internationalizedArray = definePlugin<PluginConfig>((config) => {\n  const pluginConfig = {...CONFIG_DEFAULT, ...config}\n  const {\n    apiVersion = '2022-11-27',\n    select,\n    languages,\n    fieldTypes,\n    defaultLanguages,\n    buttonLocations,\n  } = pluginConfig\n\n  return {\n    name: 'sanity-plugin-internationalized-array',\n    // Preload languages for use throughout the Studio\n    studio: Array.isArray(languages)\n      ? undefined\n      : {\n          components: {\n            layout: (props) => (\n              <>\n                <Preload apiVersion={apiVersion} languages={languages} />\n                {props.renderDefault(props)}\n              </>\n            ),\n          },\n        },\n    // Optional: render \"add language\" buttons as field actions\n    document: {\n      unstable_fieldActions: buttonLocations.includes('unstable__fieldAction')\n        ? (prev) => [...prev, internationalizedArrayFieldAction]\n        : undefined,\n    },\n    // Wrap document editor with a language provider\n    form: {\n      components: {\n        input: (props) => {\n          const isRootInput = props.id === 'root' && isObjectInputProps(props)\n\n          if (!isRootInput) {\n            return props.renderDefault(props)\n          }\n\n          const flatFieldTypeNames = flattenSchemaType(props.schemaType).map(\n            (field) => field.type.name\n          )\n          const hasInternationalizedArray = flatFieldTypeNames.some((name) =>\n            name.startsWith('internationalizedArray')\n          )\n\n          if (!hasInternationalizedArray) {\n            return props.renderDefault(props)\n          }\n\n          return (\n            <InternationalizedArrayProvider\n              {...props}\n              internationalizedArray={pluginConfig}\n            />\n          )\n        },\n      },\n    },\n    // Register custom schema types for the outer array and the inner object\n    schema: {\n      types: [\n        ...fieldTypes.map((type) =>\n          array({type, apiVersion, select, languages, defaultLanguages})\n        ),\n        ...fieldTypes.map((type) => object({type})),\n      ],\n    },\n  }\n})\n"],
  "mappings": "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",
  "names": ["equal", "a", "i", "equal", "a", "i", "preload", "entry", "defaultFilterField", "enclosingType", "field", "selectedLanguageIds", "name", "startsWith", "includes", "isLanguageFilterEnabled", "schemaType", "options", "_a", "_b", "schemaFilter", "jsonType", "getRootType", "languageFilter", "defaultEnabled", "documentTypes", "schema", "type", "storageKey", "getPersistedLanguageIds", "selectableLangs", "getSelectableLanguages", "map", "l", "id", "selected", "persistedValue", "window", "localStorage", "getItem", "JSON", "parse", "err", "array2", "filter", "value", "supportedLanguages", "defaultLanguages", "Array", "isArray", "lang", "e", "t", "n", "defaultContextValue", "apiVersion", "filterField", "setSelectedLanguageIds", "console", "error", "LanguageFilterStudioContext", "createContext", "LanguageFilterStudioProvider", "props", "client", "useClient", "languages", "setLanguages", "useState", "useEffect", "asyncLanguages", "async", "supportedLanguagesCallback", "useMemo", "__spreadProps", "jsx", "Provider", "children", "renderDefault", "useLanguageFilterStudioContext", "useContext", "unique", "arr", "from", "Set", "usePaneLanguages", "selectableLanguages", "updateSelectedIds", "useCallback", "ids", "languageIds", "setItem", "stringify", "selectAll", "selectNone", "toggleLanguage", "languageId", "activeLanguages", "allSelected", "length", "StyledBox", "styled", "Box", "LanguageFilterMenuButton", "languageOptions", "open", "setOpen", "button", "setButton", "popover", "setPopover", "handleToggleAll", "event", "currentTarget", "handleClick", "o", "handleClickOutside", "useClickOutside", "langCount", "query", "setQuery", "handleQuery", "showSearch", "content", "overflow", "jsxs", "Stack", "padding", "space", "Fragment", "LanguageFilterOption", "title", "Card", "borderTop", "Button", "mode", "onClick", "justify", "disabled", "Flex", "gap", "align", "Text", "size", "TextWithTone", "tone", "EyeClosedIcon", "EyeOpenIcon", "flex", "TextInput", "onChange", "placeholder", "language", "toLowerCase", "onToggle", "buttonText", "Popover", "animate", "portal", "ref", "text", "icon", "TranslateIcon", "handleChange", "CheckmarkCircleIcon", "CircleIcon", "Badge", "r", "FilteredObjectInput", "members", "membersProp", "restProps", "__objRest", "member", "kind", "__spreadValues", "fieldSet", "fieldsetMember", "definePlugin", "RenderLanguageFilter", "pluginOptions", "studio", "components", "layout", "document", "unstable_languageFilter", "prev", "get", "form", "input", "isObjectSchemaType", "documentType", "useFormValue", "useSchema", "preload", "clear", "peek", "__spreadProps", "AddButtons", "get", "__spreadValues", "internationalizedArray", "suspend", "equal", "l", "r", "a"]
}
