import "./chunk-XUXUFFYE.js";
import {
  useDocumentPane
} from "./chunk-BABVTRBZ.js";
import "./chunk-3X45PSUT.js";
import {
  ArrayOfObjectsItem,
  MemberItemError,
  PatchEvent,
  TextWithTone,
  defineDocumentFieldAction,
  defineField,
  definePlugin,
  insert$1,
  isDocumentSchemaType,
  isObjectInputProps,
  isObjectSchemaType,
  isSanityDocument,
  require_get,
  set,
  setIfMissing,
  unset,
  useClient,
  useFormValue,
  useSchema,
  useWorkspace
} from "./chunk-VBS6BCH4.js";
import {
  Badge,
  Box,
  Button,
  Card,
  Code,
  Flex,
  Grid,
  Label,
  Menu,
  MenuButton,
  MenuItem,
  Popover,
  Spinner,
  Stack,
  Text,
  TextInput,
  Tooltip,
  dt,
  useClickOutside,
  useToast
} from "./chunk-YAWFRRM6.js";
import "./chunk-PMNLGU32.js";
import "./chunk-OXH3XBZR.js";
import "./chunk-7AGN552O.js";
import "./chunk-3WA7R62O.js";
import {
  AddIcon,
  CheckmarkCircleIcon,
  CircleIcon,
  EyeClosedIcon,
  EyeOpenIcon,
  RemoveCircleIcon,
  TranslateIcon
} from "./chunk-2N5DZJPE.js";
import {
  require_jsx_runtime
} from "./chunk-ETYMW7QA.js";
import {
  require_react
} from "./chunk-VXGPBES6.js";
import {
  __commonJS,
  __toESM
} from "./chunk-5IKWDFCZ.js";

// ../node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "../node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal2(a2, b) {
      if (a2 === b) return true;
      if (a2 && b && typeof a2 == "object" && typeof b == "object") {
        if (a2.constructor !== b.constructor) return false;
        var length, i2, keys;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b.length) return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal2(a2[i2], b[i2])) return false;
          return true;
        }
        if (a2.constructor === RegExp) return a2.source === b.source && a2.flags === b.flags;
        if (a2.valueOf !== Object.prototype.valueOf) return a2.valueOf() === b.valueOf();
        if (a2.toString !== Object.prototype.toString) return a2.toString() === b.toString();
        keys = Object.keys(a2);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i2])) return false;
        for (i2 = length; i2-- !== 0; ) {
          var key = keys[i2];
          if (!equal2(a2[key], b[key])) return false;
        }
        return true;
      }
      return a2 !== a2 && b !== b;
    };
  }
});

// ../node_modules/suspend-react/index.js
var isPromise = (promise) => typeof promise === "object" && typeof promise.then === "function";
var globalCache = [];
function shallowEqualArrays(arrA, arrB, equal2 = (a2, b) => a2 === b) {
  if (arrA === arrB) return true;
  if (!arrA || !arrB) return false;
  const len = arrA.length;
  if (arrB.length !== len) return false;
  for (let i2 = 0; i2 < len; i2++) if (!equal2(arrA[i2], arrB[i2])) return false;
  return true;
}
function query(fn, keys = null, preload3 = false, config = {}) {
  if (keys === null) keys = [fn];
  for (const entry2 of globalCache) {
    if (shallowEqualArrays(keys, entry2.keys, entry2.equal)) {
      if (preload3) return void 0;
      if (Object.prototype.hasOwnProperty.call(entry2, "error")) throw entry2.error;
      if (Object.prototype.hasOwnProperty.call(entry2, "response")) {
        if (config.lifespan && config.lifespan > 0) {
          if (entry2.timeout) clearTimeout(entry2.timeout);
          entry2.timeout = setTimeout(entry2.remove, config.lifespan);
        }
        return entry2.response;
      }
      if (!preload3) throw entry2.promise;
    }
  }
  const entry = {
    keys,
    equal: config.equal,
    remove: () => {
      const index = globalCache.indexOf(entry);
      if (index !== -1) globalCache.splice(index, 1);
    },
    promise: (
      // Execute the promise
      (isPromise(fn) ? fn : fn(...keys)).then((response) => {
        entry.response = response;
        if (config.lifespan && config.lifespan > 0) {
          entry.timeout = setTimeout(entry.remove, config.lifespan);
        }
      }).catch((error) => entry.error = error)
    )
  };
  globalCache.push(entry);
  if (!preload3) throw entry.promise;
  return void 0;
}
var suspend = (fn, keys, config) => query(fn, keys, false, config);
var preload = (fn, keys, config) => void query(fn, keys, true, config);
var peek = (keys) => {
  var _globalCache$find;
  return (_globalCache$find = globalCache.find((entry) => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;
};
var clear = (keys) => {
  if (keys === void 0 || keys.length === 0) globalCache.splice(0, globalCache.length);
  else {
    const entry = globalCache.find((entry2) => shallowEqualArrays(keys, entry2.keys, entry2.equal));
    if (entry) entry.remove();
  }
};

// ../node_modules/sanity-plugin-internationalized-array/lib/index.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);

// ../node_modules/@sanity/language-filter/lib/index.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var k = (e2, t2, n2) => !e2.name.startsWith("locale") || n2.includes(t2.name);
function C(e2, t2) {
  var n2, r2;
  const o2 = function(e3) {
    return "object" === (null == e3 ? void 0 : e3.jsonType) && "document" === F(e3).name;
  }(e2) && (null == (n2 = null == e2 ? void 0 : e2.options) ? void 0 : n2.languageFilter), l2 = !t2.documentTypes;
  return !!(l2 && false !== o2 || !l2 && o2 || e2 && null != (r2 = t2.documentTypes) && r2.includes(e2.name));
}
function F(e2) {
  return e2.type ? F(e2.type) : e2;
}
var N = "@sanity/plugin/language-filter/selected-languages";
function E(e2) {
  const t2 = z(e2).map((e3) => e3.id);
  let n2 = t2;
  try {
    const e3 = window.localStorage.getItem(N);
    e3 && (n2 = JSON.parse(e3));
  } catch (e3) {
  }
  return r2 = t2, n2 = n2.filter((e3) => r2.includes(e3)), n2;
  var r2;
}
function z({ supportedLanguages: e2, defaultLanguages: t2 }) {
  return Array.isArray(e2) ? e2.filter((e3) => !(null != t2 && t2.includes(e3.id))) : [];
}
var J = Object.defineProperty;
var V = Object.defineProperties;
var $ = Object.getOwnPropertyDescriptors;
var _ = Object.getOwnPropertySymbols;
var H = Object.prototype.hasOwnProperty;
var W = Object.prototype.propertyIsEnumerable;
var q = (e2, t2, n2) => t2 in e2 ? J(e2, t2, { enumerable: true, configurable: true, writable: true, value: n2 }) : e2[t2] = n2;
var B = (e2, t2) => {
  for (var n2 in t2 || (t2 = {})) H.call(t2, n2) && q(e2, n2, t2[n2]);
  if (_) for (var n2 of _(t2)) W.call(t2, n2) && q(e2, n2, t2[n2]);
  return e2;
};
var G = { options: { apiVersion: "2022-11-27", supportedLanguages: [], defaultLanguages: [], documentTypes: [], filterField: k }, selectedLanguageIds: [], setSelectedLanguageIds: () => console.error("LanguageFilterStudioContext not initialized") };
var K = (0, import_react.createContext)(G);
function M(t2) {
  const n2 = useClient({ apiVersion: "2023-01-01" }), [o2, i2] = (0, import_react.useState)(Array.isArray(t2.options.supportedLanguages) ? t2.options.supportedLanguages : []);
  (0, import_react.useEffect)(() => {
    let e2 = [];
    Array.isArray(t2.options.supportedLanguages) || async function(t3) {
      e2 = await t3(n2, {}), i2(e2);
    }(t2.options.supportedLanguages);
  }, [n2, t2.options.supportedLanguages]);
  const s2 = (0, import_react.useMemo)(() => {
    return e2 = B(B({}, G.options), t2.options), V(e2, $({ supportedLanguages: o2 }));
    var e2;
  }, [t2.options, o2]), [c, d] = function(e2) {
    return (0, import_react.useState)(() => {
      var t3;
      return [...null != (t3 = e2.defaultLanguages) ? t3 : [], ...E(e2)];
    });
  }(s2);
  return (0, import_jsx_runtime.jsx)(K.Provider, { value: { options: s2, selectedLanguageIds: c, setSelectedLanguageIds: d }, children: t2.renderDefault(t2) });
}
function Q() {
  return (0, import_react.useContext)(K);
}
var R = (e2) => Array.from(new Set(e2));
function U() {
  const { selectedLanguageIds: e2, setSelectedLanguageIds: t2, options: n2 } = Q(), { defaultLanguages: r2 = [] } = n2, o2 = (0, import_react.useMemo)(() => z(n2), [n2]), l2 = (0, import_react.useCallback)((e3) => {
    var n3;
    t2(R([...r2, ...e3])), n3 = R([...r2, ...e3]), window.localStorage.setItem(N, JSON.stringify(n3));
  }, [r2, t2]), i2 = (0, import_react.useCallback)(() => l2(o2.map((e3) => e3.id)), [l2, o2]), u = (0, import_react.useCallback)(() => {
    l2(r2);
  }, [r2, l2]), c = (0, import_react.useCallback)((t3) => {
    let n3 = e2;
    n3 = n3.includes(t3) ? n3.filter((e3) => e3 !== t3) : R([...n3, t3]), l2(n3);
  }, [l2, e2]);
  return { activeLanguages: (0, import_react.useMemo)(() => R([...null != r2 ? r2 : [], ...e2]), [r2, e2]), allSelected: e2.length === o2.length + r2.length, selectAll: i2, selectNone: u, toggleLanguage: c };
}
var X = dt(Box)`
  max-height: calc(100vh - 200px);
`;
function Y() {
  const { options: o2 } = Q(), l2 = o2.supportedLanguages.filter((e2) => {
    var t2;
    return null == (t2 = o2.defaultLanguages) ? void 0 : t2.includes(e2.id);
  }), a2 = o2.supportedLanguages.filter((e2) => {
    var t2;
    return !(null != (t2 = o2.defaultLanguages) && t2.includes(e2.id));
  }), [i2, u] = (0, import_react.useState)(false), { activeLanguages: d, allSelected: p, selectAll: g, selectNone: f, toggleLanguage: h } = U(), [v, A] = (0, import_react.useState)(null), [D, k2] = (0, import_react.useState)(null), C2 = (0, import_react.useCallback)((e2) => {
    "ALL" === e2.currentTarget.value ? g() : f();
  }, [g, f]), F2 = (0, import_react.useCallback)(() => u((e2) => !e2), []), N2 = (0, import_react.useCallback)(() => u(false), []);
  useClickOutside(N2, [v, D]);
  const E2 = o2.supportedLanguages.length, [z2, J2] = (0, import_react.useState)(""), V2 = (0, import_react.useCallback)((e2) => {
    e2.currentTarget.value ? J2(e2.currentTarget.value) : J2("");
  }, []), $2 = E2 > 4, _2 = (0, import_jsx_runtime.jsx)(X, { overflow: "auto", children: (0, import_jsx_runtime.jsxs)(Stack, { padding: 1, space: 1, children: [l2.length > 0 && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [l2.map((t2) => (0, import_jsx_runtime.jsx)(Z, { id: t2.id, title: t2.title, selected: true }, t2.id)), (0, import_jsx_runtime.jsx)(Card, { borderTop: true })] }), (0, import_jsx_runtime.jsx)(Button, { mode: "bleed", onClick: C2, justify: "flex-start", value: p ? "NONE" : "ALL", disabled: !!z2, children: (0, import_jsx_runtime.jsxs)(Flex, { gap: 3, align: "center", children: [(0, import_jsx_runtime.jsx)(Text, { size: 2, children: p ? (0, import_jsx_runtime.jsx)(TextWithTone, { tone: "primary", children: (0, import_jsx_runtime.jsx)(EyeClosedIcon, {}) }) : (0, import_jsx_runtime.jsx)(EyeOpenIcon, {}) }), (0, import_jsx_runtime.jsx)(Box, { flex: 1, children: (0, import_jsx_runtime.jsx)(Text, { children: p ? "Hide all" : "Show all" }) })] }) }), $2 ? (0, import_jsx_runtime.jsx)(TextInput, { onChange: V2, value: z2, placeholder: "Filter languages" }) : (0, import_jsx_runtime.jsx)(Card, { borderTop: true }), a2.filter((e2) => !z2 || e2.title.toLowerCase().includes(z2.toLowerCase())).map((t2) => (0, import_jsx_runtime.jsx)(Z, { id: t2.id, onToggle: h, selected: d.includes(t2.id), title: t2.title }, t2.id))] }) }), H2 = d.length === E2 ? "Showing all" : `Showing ${d.length} / ${E2}`;
  return (0, import_jsx_runtime.jsx)(Popover, { animate: true, content: _2, open: i2, portal: true, ref: k2, children: (0, import_jsx_runtime.jsx)(Button, { text: H2, icon: TranslateIcon, mode: "bleed", onClick: F2, ref: A, selected: i2 }) });
}
function Z(n2) {
  const { id: r2, onToggle: o2, selected: l2, title: a2 } = n2, i2 = (0, import_react.useCallback)(() => {
    o2 && o2(r2);
  }, [r2, o2]), u = !o2;
  return (0, import_jsx_runtime.jsx)(Button, { mode: "bleed", onClick: i2, justify: "flex-start", disabled: u, children: (0, import_jsx_runtime.jsxs)(Flex, { gap: 3, align: "center", children: [(0, import_jsx_runtime.jsx)(Text, { size: 2, children: l2 ? (0, import_jsx_runtime.jsx)(TextWithTone, { tone: u ? "default" : "positive", children: (0, import_jsx_runtime.jsx)(CheckmarkCircleIcon, {}) }) : (0, import_jsx_runtime.jsx)(CircleIcon, {}) }), (0, import_jsx_runtime.jsx)(Box, { flex: 1, children: (0, import_jsx_runtime.jsx)(Text, { children: a2 }) }), (0, import_jsx_runtime.jsx)(Badge, { children: r2 })] }) });
}
var ee = Object.defineProperty;
var te = Object.defineProperties;
var ne = Object.getOwnPropertyDescriptors;
var re = Object.getOwnPropertySymbols;
var oe = Object.prototype.hasOwnProperty;
var le = Object.prototype.propertyIsEnumerable;
var ae = (e2, t2, n2) => t2 in e2 ? ee(e2, t2, { enumerable: true, configurable: true, writable: true, value: n2 }) : e2[t2] = n2;
var ie = (e2, t2) => {
  for (var n2 in t2 || (t2 = {})) oe.call(t2, n2) && ae(e2, n2, t2[n2]);
  if (re) for (var n2 of re(t2)) le.call(t2, n2) && ae(e2, n2, t2[n2]);
  return e2;
};
var se = (e2, t2) => te(e2, ne(t2));
var ue = (e2, t2) => {
  var n2 = {};
  for (var r2 in e2) oe.call(e2, r2) && t2.indexOf(r2) < 0 && (n2[r2] = e2[r2]);
  if (null != e2 && re) for (var r2 of re(e2)) t2.indexOf(r2) < 0 && le.call(e2, r2) && (n2[r2] = e2[r2]);
  return n2;
};
function ce(e2) {
  const t2 = e2, { members: n2, schemaType: r2, renderDefault: o2 } = t2, l2 = ue(t2, ["members", "schemaType", "renderDefault"]), { selectedLanguageIds: i2, options: s2 } = Q(), { filterField: u } = s2, c = (0, import_react.useMemo)(() => n2.filter((e3) => "field" === e3.kind && u(r2, e3, i2) || "fieldSet" === e3.kind || "error" === e3.kind).map((e3) => "fieldSet" === e3.kind ? se(ie({}, e3), { fieldSet: se(ie({}, e3.fieldSet), { members: e3.fieldSet.members.filter((e4) => "field" === e4.kind && u(r2, e4, i2)) }) }) : e3), [r2, n2, u, i2]);
  return o2(se(ie({}, l2), { members: c, schemaType: r2, renderDefault: o2 }));
}
var de = Object.defineProperty;
var pe = Object.defineProperties;
var ge = Object.getOwnPropertyDescriptors;
var fe = Object.getOwnPropertySymbols;
var me = Object.prototype.hasOwnProperty;
var ye = Object.prototype.propertyIsEnumerable;
var be = (e2, t2, n2) => t2 in e2 ? de(e2, t2, { enumerable: true, configurable: true, writable: true, value: n2 }) : e2[t2] = n2;
var he = (e2, t2) => {
  for (var n2 in t2 || (t2 = {})) me.call(t2, n2) && be(e2, n2, t2[n2]);
  if (fe) for (var n2 of fe(t2)) ye.call(t2, n2) && be(e2, n2, t2[n2]);
  return e2;
};
var ve = definePlugin((t2) => {
  const n2 = () => (0, import_jsx_runtime.jsx)(Y, {}), r2 = he(he({}, G.options), t2);
  return { name: "@sanity/language-filter", studio: { components: { layout: (e2) => {
    return M((t3 = he({}, e2), pe(t3, ge({ options: r2 }))));
    var t3;
  } } }, document: { unstable_languageFilter: (e2, { schemaType: r3, schema: o2 }) => C(o2.get(r3), t2) ? [...e2, n2] : e2 }, form: { components: { input: (t3) => "root" !== t3.id && isObjectSchemaType(t3.schemaType) ? function(t4) {
    const { options: n3 } = Q(), r3 = useFormValue(["_type"]);
    return C(useSchema().get(r3), n3) ? (0, import_jsx_runtime.jsx)(ce, ie({}, t4)) : t4.renderDefault(t4);
  }(t3) : t3.renderDefault(t3) } } };
});

// ../node_modules/sanity-plugin-internationalized-array/lib/index.mjs
var import_fast_deep_equal = __toESM(require_fast_deep_equal(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_get = __toESM(require_get(), 1);
var namespace = "sanity-plugin-internationalized-array";
var version = "v1";
var preload2 = (fn) => preload(() => fn(), [version, namespace]);
var clear2 = () => clear([version, namespace]);
var peek2 = (selectedValue) => peek([version, namespace, selectedValue]);
var MAX_COLUMNS = {
  codeOnly: 5,
  titleOnly: 4,
  titleAndCode: 3
};
var CONFIG_DEFAULT = {
  languages: [],
  select: {},
  defaultLanguages: [],
  fieldTypes: [],
  apiVersion: "2022-11-27",
  buttonLocations: ["field"],
  buttonAddAll: true,
  languageDisplay: "codeOnly"
};
var __defProp$9 = Object.defineProperty;
var __defProps$8 = Object.defineProperties;
var __getOwnPropDescs$8 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;
var __hasOwnProp$9 = Object.prototype.hasOwnProperty;
var __propIsEnum$9 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$9 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$9.call(b, prop) && __defNormalProp$9(a2, prop, b[prop]);
  if (__getOwnPropSymbols$9)
    for (var prop of __getOwnPropSymbols$9(b))
      __propIsEnum$9.call(b, prop) && __defNormalProp$9(a2, prop, b[prop]);
  return a2;
};
var __spreadProps$8 = (a2, b) => __defProps$8(a2, __getOwnPropDescs$8(b));
var getDocumentsToTranslate = (value, rootPath = []) => {
  if (Array.isArray(value)) {
    const arrayRootPath = [...rootPath], internationalizedValues = value.filter((item) => {
      if (Array.isArray(item)) return false;
      if (typeof item == "object") {
        const type = item == null ? void 0 : item._type;
        return (type == null ? void 0 : type.startsWith("internationalizedArray")) && (type == null ? void 0 : type.endsWith("Value"));
      }
      return false;
    });
    return internationalizedValues.length > 0 ? internationalizedValues.map((internationalizedValue) => __spreadProps$8(__spreadValues$9({}, internationalizedValue), {
      path: arrayRootPath,
      pathString: arrayRootPath.join(".")
    })) : value.length > 0 ? value.map(
      (item, index) => getDocumentsToTranslate(item, [...arrayRootPath, index])
    ).flat() : [];
  }
  if (typeof value == "object" && value) {
    const startsWithUnderscoreRegex = /^_/;
    return Object.keys(value).filter(
      (key) => !key.match(startsWithUnderscoreRegex)
    ).map((item) => {
      const selectedValue = value[item], path = [...rootPath, item];
      return getDocumentsToTranslate(selectedValue, path);
    }).flat();
  }
  return [];
};
function getLanguageDisplay(languageDisplay, title, code) {
  return languageDisplay === "codeOnly" ? code.toUpperCase() : languageDisplay === "titleOnly" ? title : languageDisplay === "titleAndCode" ? `${title} (${code.toUpperCase()})` : title;
}
function AddButtons(props) {
  const { languages, readOnly, value, onClick } = props, { languageDisplay } = useInternationalizedArrayContext();
  return languages.length > 0 ? (0, import_jsx_runtime2.jsx)(
    Grid,
    {
      columns: Math.min(languages.length, MAX_COLUMNS[languageDisplay]),
      gap: 2,
      children: languages.map((language) => {
        const languageTitle = getLanguageDisplay(
          languageDisplay,
          language.title,
          language.id
        );
        return (0, import_jsx_runtime2.jsx)(
          Button,
          {
            tone: "primary",
            mode: "ghost",
            fontSize: 1,
            disabled: readOnly || !!(value != null && value.find((item) => item._key === language.id)),
            text: languageTitle,
            icon: languages.length > MAX_COLUMNS[languageDisplay] && languageDisplay === "codeOnly" ? void 0 : AddIcon,
            value: language.id,
            onClick
          },
          language.id
        );
      })
    }
  ) : null;
}
var AddButtons$1 = (0, import_react2.memo)(AddButtons);
function DocumentAddButtons(props) {
  const { filteredLanguages } = useInternationalizedArrayContext(), value = isSanityDocument(props.value) ? props.value : void 0, toast = useToast(), { onChange } = useDocumentPane(), documentsToTranslation = getDocumentsToTranslate(value, []), handleDocumentButtonClick = (0, import_react2.useCallback)(
    async (event) => {
      const languageId = event.currentTarget.value;
      if (!languageId) {
        toast.push({
          status: "error",
          title: "No language selected"
        });
        return;
      }
      const alreadyTranslated = documentsToTranslation.filter(
        (translation) => (translation == null ? void 0 : translation._key) === languageId
      ), removeDuplicates = documentsToTranslation.reduce((filteredTranslations, translation) => alreadyTranslated.filter(
        (alreadyTranslation) => alreadyTranslation.pathString === translation.pathString
      ).length > 0 || filteredTranslations.filter(
        (filteredTranslation) => filteredTranslation.path === translation.path
      ).length > 0 ? filteredTranslations : [...filteredTranslations, translation], []);
      if (removeDuplicates.length === 0) {
        toast.push({
          status: "error",
          title: "No internationalizedArray fields found in document root"
        });
        return;
      }
      const patches = [];
      for (const toTranslate of removeDuplicates) {
        const path = toTranslate.path, ifMissing = setIfMissing([], path), insertValue = insert$1(
          [
            {
              _key: languageId,
              _type: toTranslate._type,
              value: void 0
            }
          ],
          "after",
          [...path, -1]
        );
        patches.push(ifMissing), patches.push(insertValue);
      }
      onChange(PatchEvent.from(patches.flat()));
    },
    [documentsToTranslation, onChange, toast]
  );
  return (0, import_jsx_runtime2.jsxs)(Stack, { space: 3, children: [
    (0, import_jsx_runtime2.jsx)(Box, { children: (0, import_jsx_runtime2.jsx)(Text, { size: 1, weight: "semibold", children: "Add translation to internationalized fields" }) }),
    (0, import_jsx_runtime2.jsx)(
      AddButtons$1,
      {
        languages: filteredLanguages,
        readOnly: false,
        value: void 0,
        onClick: handleDocumentButtonClick
      }
    )
  ] });
}
var getSelectedValue = (select, document) => {
  if (!select || !document)
    return {};
  const selection = select || {}, selectedValue = {};
  for (const [key, path] of Object.entries(selection)) {
    let value = (0, import_get.default)(document, path);
    Array.isArray(value) && (value = value.filter(
      (item) => typeof item == "object" ? (item == null ? void 0 : item._type) === "reference" && "_ref" in item : true
    )), selectedValue[key] = value;
  }
  return selectedValue;
};
var __defProp$8 = Object.defineProperty;
var __defProps$7 = Object.defineProperties;
var __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$8 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$8.call(b, prop) && __defNormalProp$8(a2, prop, b[prop]);
  if (__getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(b))
      __propIsEnum$8.call(b, prop) && __defNormalProp$8(a2, prop, b[prop]);
  return a2;
};
var __spreadProps$7 = (a2, b) => __defProps$7(a2, __getOwnPropDescs$7(b));
var InternationalizedArrayContext = (0, import_react2.createContext)(__spreadProps$7(__spreadValues$8({}, CONFIG_DEFAULT), {
  languages: [],
  filteredLanguages: []
}));
function useInternationalizedArrayContext() {
  return (0, import_react2.useContext)(InternationalizedArrayContext);
}
function InternationalizedArrayProvider(props) {
  const { internationalizedArray: internationalizedArray2 } = props, client = useClient({ apiVersion: internationalizedArray2.apiVersion }), workspace = useWorkspace(), { formState } = useDocumentPane(), deferredDocument = (0, import_react2.useDeferredValue)(formState == null ? void 0 : formState.value), selectedValue = (0, import_react2.useMemo)(
    () => getSelectedValue(internationalizedArray2.select, deferredDocument),
    [internationalizedArray2.select, deferredDocument]
  ), languages = Array.isArray(internationalizedArray2.languages) ? internationalizedArray2.languages : suspend(
    // eslint-disable-next-line require-await
    async () => typeof internationalizedArray2.languages == "function" ? internationalizedArray2.languages(client, selectedValue) : internationalizedArray2.languages,
    [version, namespace, selectedValue, workspace],
    { equal: import_fast_deep_equal.default }
  ), { selectedLanguageIds, options: languageFilterOptions } = Q(), filteredLanguages = (0, import_react2.useMemo)(() => {
    const documentType = deferredDocument ? deferredDocument._type : void 0;
    return typeof documentType == "string" && languageFilterOptions.documentTypes.includes(documentType) ? languages.filter(
      (language) => selectedLanguageIds.includes(language.id)
    ) : languages;
  }, [deferredDocument, languageFilterOptions, languages, selectedLanguageIds]), showDocumentButtons = internationalizedArray2.buttonLocations.includes("document"), context = (0, import_react2.useMemo)(
    () => __spreadProps$7(__spreadValues$8({}, internationalizedArray2), { languages, filteredLanguages }),
    [filteredLanguages, internationalizedArray2, languages]
  );
  return (0, import_jsx_runtime2.jsx)(InternationalizedArrayContext.Provider, { value: context, children: showDocumentButtons ? (0, import_jsx_runtime2.jsxs)(Stack, { space: 5, children: [
    (0, import_jsx_runtime2.jsx)(DocumentAddButtons, { value: props.value }),
    props.renderDefault(props)
  ] }) : props.renderDefault(props) });
}
var Preload = (0, import_react2.memo)(function(props) {
  const client = useClient({ apiVersion: props.apiVersion });
  return Array.isArray(peek2({})) || preload2(
    async () => Array.isArray(props.languages) ? props.languages : props.languages(client, {})
  ), null;
});
function checkAllLanguagesArePresent(languages, value) {
  const filteredLanguageIds = languages.map((l2) => l2.id), languagesInUseIds = value ? value.map((v) => v._key) : [];
  return languagesInUseIds.length === filteredLanguageIds.length && languagesInUseIds.every((l2) => filteredLanguageIds.includes(l2));
}
function createAddAllTitle(value, languages) {
  return value != null && value.length ? `Add missing ${languages.length - value.length === 1 ? "language" : "languages"}` : languages.length === 1 ? `Add ${languages[0].title} Field` : "Add all languages";
}
function createValueSchemaTypeName(schemaType) {
  return `${schemaType.name}Value`;
}
var __defProp$7 = Object.defineProperty;
var __defProps$6 = Object.defineProperties;
var __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;
var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
var __propIsEnum$7 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$7 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$7.call(b, prop) && __defNormalProp$7(a2, prop, b[prop]);
  if (__getOwnPropSymbols$7)
    for (var prop of __getOwnPropSymbols$7(b))
      __propIsEnum$7.call(b, prop) && __defNormalProp$7(a2, prop, b[prop]);
  return a2;
};
var __spreadProps$6 = (a2, b) => __defProps$6(a2, __getOwnPropDescs$6(b));
function createAddLanguagePatches(config) {
  const {
    addLanguageKeys,
    schemaType,
    languages,
    filteredLanguages,
    value,
    path = []
  } = config, itemBase = { _type: createValueSchemaTypeName(schemaType) }, newItems = Array.isArray(addLanguageKeys) && addLanguageKeys.length > 0 ? addLanguageKeys.map((id) => __spreadProps$6(__spreadValues$7({}, itemBase), {
    _key: id
  })) : filteredLanguages.filter(
    (language) => value != null && value.length ? !value.find((v) => v._key === language.id) : true
  ).map((language) => __spreadProps$6(__spreadValues$7({}, itemBase), {
    _key: language.id
  })), languagesInUse = value != null && value.length ? value.map((v) => v) : [];
  return newItems.map((item) => {
    const languageIndex = languages.findIndex((l2) => item._key === l2.id), remainingLanguages = languages.slice(languageIndex + 1), nextLanguageIndex = languagesInUse.findIndex(
      (l2) => (
        // eslint-disable-next-line max-nested-callbacks
        remainingLanguages.find((r2) => r2.id === l2._key)
      )
    );
    return nextLanguageIndex < 0 ? languagesInUse.push(item) : languagesInUse.splice(nextLanguageIndex, 0, item), nextLanguageIndex < 0 ? (
      // No next language (-1), add to end of array
      insert$1([item], "after", [...path, nextLanguageIndex])
    ) : (
      // Next language found, insert before that
      insert$1([item], "before", [...path, nextLanguageIndex])
    );
  });
}
var createTranslateFieldActions = (fieldActionProps, { languages, filteredLanguages }) => languages.map((language) => {
  const value = useFormValue(fieldActionProps.path), disabled = value && Array.isArray(value) ? !!(value != null && value.find((item) => item._key === language.id)) : false, hidden = !filteredLanguages.some((f) => f.id === language.id), { onChange } = useDocumentPane(), onAction = (0, import_react2.useCallback)(() => {
    const { schemaType, path } = fieldActionProps, addLanguageKeys = [language.id], patches = createAddLanguagePatches({
      addLanguageKeys,
      schemaType,
      languages,
      filteredLanguages,
      value,
      path
    });
    onChange(PatchEvent.from([setIfMissing([], path), ...patches]));
  }, [language.id, value, onChange]);
  return {
    type: "action",
    icon: AddIcon,
    onAction,
    title: language.title,
    hidden,
    disabled
  };
});
var AddMissingTranslationsFieldAction = (fieldActionProps, { languages, filteredLanguages }) => {
  const value = useFormValue(fieldActionProps.path), disabled = value && value.length === filteredLanguages.length, hidden = checkAllLanguagesArePresent(filteredLanguages, value), { onChange } = useDocumentPane(), onAction = (0, import_react2.useCallback)(() => {
    const { schemaType, path } = fieldActionProps, patches = createAddLanguagePatches({
      addLanguageKeys: [],
      schemaType,
      languages,
      filteredLanguages,
      value,
      path
    });
    onChange(PatchEvent.from([setIfMissing([], path), ...patches]));
  }, [fieldActionProps, filteredLanguages, languages, onChange, value]);
  return {
    type: "action",
    icon: AddIcon,
    onAction,
    title: createAddAllTitle(value, filteredLanguages),
    disabled,
    hidden
  };
};
var internationalizedArrayFieldAction = defineDocumentFieldAction({
  name: "internationalizedArray",
  useAction(fieldActionProps) {
    var _a, _b;
    const isInternationalizedArrayField = (_b = (_a = fieldActionProps == null ? void 0 : fieldActionProps.schemaType) == null ? void 0 : _a.type) == null ? void 0 : _b.name.startsWith(
      "internationalizedArray"
    ), { languages, filteredLanguages } = useInternationalizedArrayContext(), translateFieldActions = createTranslateFieldActions(
      fieldActionProps,
      { languages, filteredLanguages }
    );
    return {
      type: "group",
      icon: TranslateIcon,
      title: "Add Translation",
      renderAsButton: true,
      children: isInternationalizedArrayField ? [
        ...translateFieldActions,
        AddMissingTranslationsFieldAction(fieldActionProps, {
          languages,
          filteredLanguages
        })
      ] : [],
      hidden: !isInternationalizedArrayField
    };
  }
});
function camelCase(string) {
  return string.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
}
function titleCase(string) {
  return string.split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
}
function pascalCase(string) {
  return titleCase(camelCase(string));
}
function createFieldName(name, addValue = false) {
  return addValue ? ["internationalizedArray", pascalCase(name), "Value"].join("") : ["internationalizedArray", pascalCase(name)].join("");
}
var schemaExample = {
  languages: [
    { id: "en", title: "English" },
    { id: "no", title: "Norsk" }
  ]
};
function Feedback() {
  return (0, import_jsx_runtime2.jsx)(Card, { tone: "caution", border: true, radius: 2, padding: 3, children: (0, import_jsx_runtime2.jsxs)(Stack, { space: 4, children: [
    (0, import_jsx_runtime2.jsxs)(Text, { children: [
      "An array of language objects must be passed into the",
      " ",
      (0, import_jsx_runtime2.jsx)("code", { children: "internationalizedArray" }),
      " helper function, each with an",
      " ",
      (0, import_jsx_runtime2.jsx)("code", { children: "id" }),
      " and ",
      (0, import_jsx_runtime2.jsx)("code", { children: "title" }),
      " field. Example:"
    ] }),
    (0, import_jsx_runtime2.jsx)(Card, { padding: 2, border: true, radius: 2, children: (0, import_jsx_runtime2.jsx)(Code, { size: 1, language: "javascript", children: JSON.stringify(schemaExample, null, 2) }) })
  ] }) });
}
var __defProp$6 = Object.defineProperty;
var __defProps$5 = Object.defineProperties;
var __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;
var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
var __propIsEnum$6 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$6 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$6.call(b, prop) && __defNormalProp$6(a2, prop, b[prop]);
  if (__getOwnPropSymbols$6)
    for (var prop of __getOwnPropSymbols$6(b))
      __propIsEnum$6.call(b, prop) && __defNormalProp$6(a2, prop, b[prop]);
  return a2;
};
var __spreadProps$5 = (a2, b) => __defProps$5(a2, __getOwnPropDescs$5(b));
function InternationalizedArray(props) {
  const { members, value, schemaType, onChange } = props, readOnly = typeof schemaType.readOnly == "boolean" ? schemaType.readOnly : false, toast = useToast(), {
    languages,
    filteredLanguages,
    defaultLanguages,
    buttonAddAll,
    buttonLocations
  } = useInternationalizedArrayContext(), { selectedLanguageIds, options: languageFilterOptions } = Q(), documentType = useFormValue(["_type"]), languageFilterEnabled = typeof documentType == "string" && languageFilterOptions.documentTypes.includes(documentType), filteredMembers = (0, import_react2.useMemo)(
    () => languageFilterEnabled ? members.filter((member) => {
      if (member.kind !== "item")
        return false;
      const valueMember = member.item.members[0];
      return valueMember.kind !== "field" ? false : languageFilterOptions.filterField(
        member.item.schemaType,
        valueMember,
        selectedLanguageIds
      );
    }) : members,
    [languageFilterEnabled, members, languageFilterOptions, selectedLanguageIds]
  ), handleAddLanguage = (0, import_react2.useCallback)(
    async (param) => {
      var _a;
      if (!(filteredLanguages != null && filteredLanguages.length))
        return;
      const addLanguageKeys = Array.isArray(param) ? param : [(_a = param == null ? void 0 : param.currentTarget) == null ? void 0 : _a.value].filter(Boolean), patches = createAddLanguagePatches({
        addLanguageKeys,
        schemaType,
        languages,
        filteredLanguages,
        value
      });
      onChange([setIfMissing([]), ...patches]);
    },
    [filteredLanguages, languages, onChange, schemaType, value]
  ), { isDeleting } = useDocumentPane(), addedLanguages = members.map(({ key }) => key), hasAddedDefaultLanguages = defaultLanguages.filter((language) => languages.find((l2) => l2.id === language)).every((language) => addedLanguages.includes(language));
  (0, import_react2.useEffect)(() => {
    if (!isDeleting && !hasAddedDefaultLanguages) {
      const languagesToAdd = defaultLanguages.filter((language) => !addedLanguages.includes(language)).filter((language) => languages.find((l2) => l2.id === language)), timeout = setTimeout(() => handleAddLanguage(languagesToAdd));
      return () => clearTimeout(timeout);
    }
  }, [
    isDeleting,
    hasAddedDefaultLanguages,
    handleAddLanguage,
    defaultLanguages,
    addedLanguages,
    languages
  ]);
  const handleRestoreOrder = (0, import_react2.useCallback)(() => {
    if (!(value != null && value.length) || !(languages != null && languages.length))
      return;
    const updatedValue = value.reduce((acc, v) => {
      const newIndex = languages.findIndex((l2) => l2.id === (v == null ? void 0 : v._key));
      return newIndex > -1 && (acc[newIndex] = v), acc;
    }, []).filter(Boolean);
    (value == null ? void 0 : value.length) !== updatedValue.length && toast.push({
      title: "There was an error reordering languages",
      status: "warning"
    }), onChange(set(updatedValue));
  }, [toast, languages, onChange, value]), allKeysAreLanguages = (0, import_react2.useMemo)(() => !(value != null && value.length) || !(languages != null && languages.length) ? true : value == null ? void 0 : value.every((v) => languages.find((l2) => (l2 == null ? void 0 : l2.id) === (v == null ? void 0 : v._key))), [value, languages]), languagesInUse = (0, import_react2.useMemo)(
    () => languages && languages.length > 1 ? languages.filter((l2) => value == null ? void 0 : value.find((v) => v._key === l2.id)) : [],
    [languages, value]
  ), languagesOutOfOrder = (0, import_react2.useMemo)(() => !(value != null && value.length) || !languagesInUse.length ? [] : value.map(
    (v, vIndex) => vIndex === languagesInUse.findIndex((l2) => l2.id === v._key) ? null : v
  ).filter(Boolean), [value, languagesInUse]), languagesAreValid = (0, import_react2.useMemo)(
    () => !(languages != null && languages.length) || (languages == null ? void 0 : languages.length) && languages.every((item) => item.id && item.title),
    [languages]
  );
  (0, import_react2.useEffect)(() => {
    languagesOutOfOrder.length > 0 && allKeysAreLanguages && handleRestoreOrder();
  }, [languagesOutOfOrder, allKeysAreLanguages, handleRestoreOrder]);
  const allLanguagesArePresent = (0, import_react2.useMemo)(
    () => checkAllLanguagesArePresent(filteredLanguages, value),
    [filteredLanguages, value]
  );
  if (!languagesAreValid)
    return (0, import_jsx_runtime2.jsx)(Feedback, {});
  const addButtonsAreVisible = (
    // Plugin was configured to display buttons here (default!)
    buttonLocations.includes("field") && // There's at least one language visible
    (filteredLanguages == null ? void 0 : filteredLanguages.length) > 0 && // Not every language has a value yet
    !allLanguagesArePresent
  ), fieldHasMembers = (members == null ? void 0 : members.length) > 0;
  return (0, import_jsx_runtime2.jsxs)(Stack, { space: 2, children: [
    fieldHasMembers ? (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: filteredMembers.map((member) => member.kind === "item" ? (0, import_react2.createElement)(
      ArrayOfObjectsItem,
      __spreadProps$5(__spreadValues$6({}, props), {
        key: member.key,
        member
      })
    ) : (0, import_jsx_runtime2.jsx)(MemberItemError, { member }, member.key)) }) : null,
    !addButtonsAreVisible && !fieldHasMembers ? (0, import_jsx_runtime2.jsx)(Card, { border: true, tone: "transparent", padding: 3, radius: 2, children: (0, import_jsx_runtime2.jsx)(Text, { size: 1, children: "This internationalized field currently has no translations." }) }) : null,
    addButtonsAreVisible ? (0, import_jsx_runtime2.jsxs)(Stack, { space: 2, children: [
      (0, import_jsx_runtime2.jsx)(
        AddButtons$1,
        {
          languages: filteredLanguages,
          value,
          readOnly,
          onClick: handleAddLanguage
        }
      ),
      buttonAddAll ? (0, import_jsx_runtime2.jsx)(
        Button,
        {
          tone: "primary",
          mode: "ghost",
          disabled: readOnly || allLanguagesArePresent,
          icon: AddIcon,
          text: createAddAllTitle(value, filteredLanguages),
          onClick: handleAddLanguage
        }
      ) : null
    ] }) : null
  ] });
}
function getLanguagesFieldOption(schemaType) {
  var _a;
  return schemaType ? ((_a = schemaType.options) == null ? void 0 : _a.languages) || getLanguagesFieldOption(schemaType.type) : void 0;
}
var __defProp$5 = Object.defineProperty;
var __defProps$4 = Object.defineProperties;
var __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;
var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
var __propIsEnum$5 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$5 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$5.call(b, prop) && __defNormalProp$5(a2, prop, b[prop]);
  if (__getOwnPropSymbols$5)
    for (var prop of __getOwnPropSymbols$5(b))
      __propIsEnum$5.call(b, prop) && __defNormalProp$5(a2, prop, b[prop]);
  return a2;
};
var __spreadProps$4 = (a2, b) => __defProps$4(a2, __getOwnPropDescs$4(b));
var array = (config) => {
  const { apiVersion, select, languages, type } = config, typeName = typeof type == "string" ? type : type.name, arrayName = createFieldName(typeName), objectName = createFieldName(typeName, true);
  return defineField({
    name: arrayName,
    title: "Internationalized array",
    type: "array",
    components: {
      input: InternationalizedArray
    },
    options: {
      // @ts-expect-error - these options are required for validation rules – not the custom input component
      apiVersion,
      select,
      languages
    },
    of: [
      defineField(__spreadProps$4(__spreadValues$5({}, typeof type == "string" ? {} : type), {
        name: objectName,
        type: objectName
      }))
    ],
    // @ts-expect-error - fix typings
    validation: (rule) => rule.custom(async (value, context) => {
      if (!value)
        return true;
      const selectedValue = getSelectedValue(select, context.document), client = context.getClient({ apiVersion });
      let contextLanguages = [];
      const languagesFieldOption = getLanguagesFieldOption(context == null ? void 0 : context.type);
      if (Array.isArray(languagesFieldOption) ? contextLanguages = languagesFieldOption : Array.isArray(peek2(selectedValue)) ? contextLanguages = peek2(selectedValue) || [] : typeof languagesFieldOption == "function" && (contextLanguages = await languagesFieldOption(client, selectedValue)), value && value.length > contextLanguages.length)
        return `Cannot be more than ${contextLanguages.length === 1 ? "1 item" : `${contextLanguages.length} items`}`;
      const nonLanguageKeys = value != null && value.length ? value.filter(
        (item) => !contextLanguages.find((language) => item._key === language.id)
      ) : [];
      if (nonLanguageKeys.length)
        return {
          message: "Array item keys must be valid languages registered to the field type",
          paths: nonLanguageKeys.map((item) => [{ _key: item._key }])
        };
      const valuesByLanguage = value != null && value.length ? value.filter((item) => !!(item != null && item._key)).reduce((acc, cur) => acc[cur._key] ? __spreadProps$4(__spreadValues$5({}, acc), { [cur._key]: [...acc[cur._key], cur] }) : __spreadProps$4(__spreadValues$5({}, acc), {
        [cur._key]: [cur]
      }), {}) : {}, duplicateValues = Object.values(valuesByLanguage).filter((item) => (item == null ? void 0 : item.length) > 1).flat();
      return duplicateValues.length ? {
        message: "There can only be one field per language",
        paths: duplicateValues.map((item) => [{ _key: item._key }])
      } : true;
    })
  });
};
var __defProp$4 = Object.defineProperty;
var __defProps$3 = Object.defineProperties;
var __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;
var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
var __propIsEnum$4 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$4 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$4.call(b, prop) && __defNormalProp$4(a2, prop, b[prop]);
  if (__getOwnPropSymbols$4)
    for (var prop of __getOwnPropSymbols$4(b))
      __propIsEnum$4.call(b, prop) && __defNormalProp$4(a2, prop, b[prop]);
  return a2;
};
var __spreadProps$3 = (a2, b) => __defProps$3(a2, __getOwnPropDescs$3(b));
function InternationalizedField(props) {
  return props.schemaType.name === "reference" && props.value ? props.renderDefault(__spreadProps$3(__spreadValues$4({}, props), {
    title: "",
    level: 0
  })) : props.children;
}
function getToneFromValidation(validations) {
  if (!(validations != null && validations.length))
    return;
  const validationLevels = validations.map((v) => v.level);
  if (validationLevels.includes("error"))
    return "critical";
  if (validationLevels.includes("warning"))
    return "caution";
}
var __defProp$3 = Object.defineProperty;
var __defProps$2 = Object.defineProperties;
var __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;
var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
var __propIsEnum$3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$3 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$3.call(b, prop) && __defNormalProp$3(a2, prop, b[prop]);
  if (__getOwnPropSymbols$3)
    for (var prop of __getOwnPropSymbols$3(b))
      __propIsEnum$3.call(b, prop) && __defNormalProp$3(a2, prop, b[prop]);
  return a2;
};
var __spreadProps$2 = (a2, b) => __defProps$2(a2, __getOwnPropDescs$2(b));
function InternationalizedInput(props) {
  const parentValue = useFormValue(
    props.path.slice(0, -1)
  ), inlineProps = __spreadProps$2(__spreadValues$3({}, props.inputProps), {
    // This is the magic that makes inline editing work?
    members: props.inputProps.members.filter(
      (m) => m.kind === "field" && m.name === "value"
    ),
    // This just overrides the type
    // TODO: Remove this as it shouldn't be necessary?
    value: props.value
  }), { validation, value, onChange, readOnly } = inlineProps, { languages, languageDisplay, defaultLanguages } = useInternationalizedArrayContext(), languageKeysInUse = (0, import_react2.useMemo)(
    () => {
      var _a;
      return (_a = parentValue == null ? void 0 : parentValue.map((v) => v._key)) != null ? _a : [];
    },
    [parentValue]
  ), keyIsValid = languages != null && languages.length ? languages.find((l2) => l2.id === value._key) : false, handleKeyChange = (0, import_react2.useCallback)(
    (event) => {
      var _a;
      const languageId = (_a = event == null ? void 0 : event.currentTarget) == null ? void 0 : _a.value;
      !value || !(languages != null && languages.length) || !languages.find((l2) => l2.id === languageId) || onChange([set(languageId, ["_key"])]);
    },
    [onChange, value, languages]
  ), handleUnset = (0, import_react2.useCallback)(() => {
    onChange(unset());
  }, [onChange]);
  if (!languages)
    return (0, import_jsx_runtime2.jsx)(Spinner, {});
  const language = languages.find((l2) => l2.id === value._key), languageTitle = keyIsValid && language ? getLanguageDisplay(languageDisplay, language.title, language.id) : "", isDefault = defaultLanguages.includes(value._key), removeButton = (0, import_jsx_runtime2.jsx)(
    Button,
    {
      mode: "bleed",
      icon: RemoveCircleIcon,
      tone: "critical",
      disabled: readOnly || isDefault,
      onClick: handleUnset
    }
  );
  return (0, import_jsx_runtime2.jsx)(Card, { paddingTop: 2, tone: getToneFromValidation(validation), children: (0, import_jsx_runtime2.jsxs)(Stack, { space: 2, children: [
    (0, import_jsx_runtime2.jsx)(Card, { tone: "inherit", children: keyIsValid ? (0, import_jsx_runtime2.jsx)(Label, { muted: true, size: 1, children: languageTitle }) : (0, import_jsx_runtime2.jsx)(
      MenuButton,
      {
        button: (0, import_jsx_runtime2.jsx)(Button, { fontSize: 1, text: `Change "${value._key}"` }),
        id: `${value._key}-change-key`,
        menu: (0, import_jsx_runtime2.jsx)(Menu, { children: languages.map((lang) => (0, import_jsx_runtime2.jsx)(
          MenuItem,
          {
            disabled: languageKeysInUse.includes(lang.id),
            fontSize: 1,
            text: lang.id.toLocaleUpperCase(),
            value: lang.id,
            onClick: handleKeyChange
          },
          lang.id
        )) }),
        popover: { portal: true }
      }
    ) }),
    (0, import_jsx_runtime2.jsxs)(Flex, { align: "center", gap: 2, children: [
      (0, import_jsx_runtime2.jsx)(Card, { flex: 1, tone: "inherit", children: props.inputProps.renderInput(props.inputProps) }),
      (0, import_jsx_runtime2.jsx)(Card, { tone: "inherit", children: isDefault ? (0, import_jsx_runtime2.jsx)(
        Tooltip,
        {
          content: (0, import_jsx_runtime2.jsx)(Text, { muted: true, size: 1, children: "Can't remove default language" }),
          fallbackPlacements: ["right", "left"],
          placement: "top",
          portal: true,
          children: (0, import_jsx_runtime2.jsx)("span", { children: removeButton })
        }
      ) : removeButton })
    ] })
  ] }) });
}
var __defProp$2 = Object.defineProperty;
var __defProps$1 = Object.defineProperties;
var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a2, prop, b[prop]);
  if (__getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(b))
      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a2, prop, b[prop]);
  return a2;
};
var __spreadProps$1 = (a2, b) => __defProps$1(a2, __getOwnPropDescs$1(b));
var object = (config) => {
  const { type } = config, typeName = typeof type == "string" ? type : type.name, objectName = createFieldName(typeName, true);
  return defineField({
    name: objectName,
    title: `Internationalized array ${type}`,
    type: "object",
    components: {
      // @ts-expect-error - fix typings
      item: InternationalizedInput
    },
    fields: [
      typeof type == "string" ? (
        // Define a simple field if all we have is the name as a string
        defineField({
          name: "value",
          type,
          components: {
            field: InternationalizedField
          }
        })
      ) : (
        // Pass in the configured options, but overwrite the name
        __spreadProps$1(__spreadValues$2({}, type), {
          name: "value",
          components: {
            field: InternationalizedField
          }
        })
      )
    ],
    preview: {
      select: {
        title: "value",
        subtitle: "_key"
      }
    }
  });
};
var __defProp$1 = Object.defineProperty;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a2, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b))
      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a2, prop, b[prop]);
  return a2;
};
function flattenSchemaType(schemaType) {
  return isDocumentSchemaType(schemaType) ? extractInnerFields(schemaType.fields, [], 3) : (console.error("Schema type is not a document"), []);
}
function extractInnerFields(fields, path, maxDepth) {
  return path.length >= maxDepth ? [] : fields.reduce((acc, field) => {
    const thisFieldWithPath = __spreadValues$1({ path: [...path, field.name] }, field);
    if (field.type.jsonType === "object") {
      const innerFields = extractInnerFields(
        field.type.fields,
        [...path, field.name],
        maxDepth
      );
      return [...acc, thisFieldWithPath, ...innerFields];
    } else if (field.type.jsonType === "array" && field.type.of.length && field.type.of.some((item) => "fields" in item)) {
      const innerFields = field.type.of.flatMap(
        (innerField) => extractInnerFields(
          // @ts-expect-error - Fix TS assertion for array fields
          innerField.fields,
          [...path, field.name],
          maxDepth
        )
      );
      return [...acc, thisFieldWithPath, ...innerFields];
    }
    return [...acc, thisFieldWithPath];
  }, []);
}
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp.call(b, prop) && __defNormalProp(a2, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b))
      __propIsEnum.call(b, prop) && __defNormalProp(a2, prop, b[prop]);
  return a2;
};
var __spreadProps = (a2, b) => __defProps(a2, __getOwnPropDescs(b));
var internationalizedArray = definePlugin((config) => {
  const pluginConfig = __spreadValues(__spreadValues({}, CONFIG_DEFAULT), config), {
    apiVersion = "2022-11-27",
    select,
    languages,
    fieldTypes,
    defaultLanguages,
    buttonLocations
  } = pluginConfig;
  return {
    name: "sanity-plugin-internationalized-array",
    // Preload languages for use throughout the Studio
    studio: Array.isArray(languages) ? void 0 : {
      components: {
        layout: (props) => (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
          (0, import_jsx_runtime2.jsx)(Preload, { apiVersion, languages }),
          props.renderDefault(props)
        ] })
      }
    },
    // Optional: render "add language" buttons as field actions
    document: {
      unstable_fieldActions: buttonLocations.includes("unstable__fieldAction") ? (prev) => [...prev, internationalizedArrayFieldAction] : void 0
    },
    // Wrap document editor with a language provider
    form: {
      components: {
        input: (props) => !(props.id === "root" && isObjectInputProps(props)) || !flattenSchemaType(props.schemaType).map(
          (field) => field.type.name
        ).some(
          (name) => name.startsWith("internationalizedArray")
        ) ? props.renderDefault(props) : (0, import_jsx_runtime2.jsx)(
          InternationalizedArrayProvider,
          __spreadProps(__spreadValues({}, props), {
            internationalizedArray: pluginConfig
          })
        )
      }
    },
    // Register custom schema types for the outer array and the inner object
    schema: {
      types: [
        ...fieldTypes.map(
          (type) => array({ type, apiVersion, select, languages, defaultLanguages })
        ),
        ...fieldTypes.map((type) => object({ type }))
      ]
    }
  };
});
export {
  clear2 as clear,
  internationalizedArray
};
//# sourceMappingURL=sanity-plugin-internationalized-array.js.map
